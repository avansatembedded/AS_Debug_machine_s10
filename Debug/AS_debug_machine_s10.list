
AS_debug_machine_s10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000978c  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2a0  0800e2a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2a0  0800e2a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2a0  0800e2a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2a0  0800e2a0  0001e2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2a4  0800e2a4  0001e2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800e2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000150  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a0f8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022a1  00000000  00000000  0002a177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a40  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000731  00000000  00000000  0002ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025dcf  00000000  00000000  0002d589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011274  00000000  00000000  00053358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2b7e  00000000  00000000  000645cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002658  00000000  00000000  0014714c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  001497a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004afc 	.word	0x08004afc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004afc 	.word	0x08004afc

080001ec <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <LL_AHB3_GRP1_EnableClock+0x2c>)
 80001f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80001f8:	4907      	ldr	r1, [pc, #28]	; (8000218 <LL_AHB3_GRP1_EnableClock+0x2c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	638b      	str	r3, [r1, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <LL_AHB3_GRP1_EnableClock+0x2c>)
 8000202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4013      	ands	r3, r2
 8000208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800020a:	68fb      	ldr	r3, [r7, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40023800 	.word	0x40023800

0800021c <MX_FMC_Init>:
#include "main.h"



 void MX_FMC_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b09e      	sub	sp, #120	; 0x78
 8000220:	af00      	add	r7, sp, #0
	SDRAM_HandleTypeDef hsdram1;


	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]
 8000232:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
 8000244:	615a      	str	r2, [r3, #20]
 8000246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN FMC_Init 1 */
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_FMC );
 8000248:	2001      	movs	r0, #1
 800024a:	f7ff ffcf 	bl	80001ec <LL_AHB3_GRP1_EnableClock>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800024e:	4b40      	ldr	r3, [pc, #256]	; (8000350 <MX_FMC_Init+0x134>)
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  /* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000252:	2301      	movs	r3, #1
 8000254:	64bb      	str	r3, [r7, #72]	; 0x48
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000256:	2300      	movs	r3, #0
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800025a:	2304      	movs	r3, #4
 800025c:	653b      	str	r3, [r7, #80]	; 0x50
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 800025e:	2300      	movs	r3, #0
 8000260:	657b      	str	r3, [r7, #84]	; 0x54
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000262:	2340      	movs	r3, #64	; 0x40
 8000264:	65bb      	str	r3, [r7, #88]	; 0x58
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000266:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800026a:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800026c:	2300      	movs	r3, #0
 800026e:	663b      	str	r3, [r7, #96]	; 0x60
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000270:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000274:	667b      	str	r3, [r7, #100]	; 0x64
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000276:	2300      	movs	r3, #0
 8000278:	66bb      	str	r3, [r7, #104]	; 0x68
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800027a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800027e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000280:	2310      	movs	r3, #16
 8000282:	613b      	str	r3, [r7, #16]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000284:	2310      	movs	r3, #16
 8000286:	617b      	str	r3, [r7, #20]
  SdramTiming.SelfRefreshTime = 16;
 8000288:	2310      	movs	r3, #16
 800028a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RowCycleDelay = 16;
 800028c:	2310      	movs	r3, #16
 800028e:	61fb      	str	r3, [r7, #28]
  SdramTiming.WriteRecoveryTime = 16;
 8000290:	2310      	movs	r3, #16
 8000292:	623b      	str	r3, [r7, #32]
  SdramTiming.RPDelay = 16;
 8000294:	2310      	movs	r3, #16
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RCDDelay = 16;
 8000298:	2310      	movs	r3, #16
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800029c:	f107 0210 	add.w	r2, r7, #16
 80002a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002a4:	4611      	mov	r1, r2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 fdc9 	bl	8001e3e <HAL_SDRAM_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <MX_FMC_Init+0x9a>
  {
    Error_Handler( );
 80002b2:	f000 fbe1 	bl	8000a78 <Error_Handler>
  }
  HAL_Delay(1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f001 f866 	bl	8001388 <HAL_Delay>
	/* USER CODE BEGIN FMC_Init 2 */
	/* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef Command;
	/* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
	/* Step 3: Configure a clock configuration enable command */
	 Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 80002bc:	2301      	movs	r3, #1
 80002be:	603b      	str	r3, [r7, #0]
	 Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 80002c0:	2308      	movs	r3, #8
 80002c2:	607b      	str	r3, [r7, #4]
	 Command.AutoRefreshNumber      = 1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
	 Command.ModeRegisterDefinition = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
	 HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80002cc:	4639      	mov	r1, r7
 80002ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fde5 	bl	8001ea6 <HAL_SDRAM_SendCommand>

	 HAL_Delay(100); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 80002dc:	2064      	movs	r0, #100	; 0x64
 80002de:	f001 f853 	bl	8001388 <HAL_Delay>
	 /* Step 5: Configure a PALL (precharge all) command */
	 Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 80002e2:	2302      	movs	r3, #2
 80002e4:	603b      	str	r3, [r7, #0]
	 HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80002e6:	4639      	mov	r1, r7
 80002e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fdd8 	bl	8001ea6 <HAL_SDRAM_SendCommand>
	 /* Step 6: Configure an Auto Refresh command */
	 Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 80002f6:	2303      	movs	r3, #3
 80002f8:	603b      	str	r3, [r7, #0]
	 Command.AutoRefreshNumber      = 2;
 80002fa:	2302      	movs	r3, #2
 80002fc:	60bb      	str	r3, [r7, #8]
	 HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80002fe:	4639      	mov	r1, r7
 8000300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000304:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fdcc 	bl	8001ea6 <HAL_SDRAM_SendCommand>
	 HAL_Delay(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f001 f83a 	bl	8001388 <HAL_Delay>

	 /* Step 7: Program the external memory mode register */
	 Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000314:	2304      	movs	r3, #4
 8000316:	603b      	str	r3, [r7, #0]
	 Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000318:	f44f 7308 	mov.w	r3, #544	; 0x220
 800031c:	60fb      	str	r3, [r7, #12]
	 HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 800031e:	4639      	mov	r1, r7
 8000320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000324:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fdbc 	bl	8001ea6 <HAL_SDRAM_SendCommand>
	 HAL_Delay(100);
 800032e:	2064      	movs	r0, #100	; 0x64
 8000330:	f001 f82a 	bl	8001388 <HAL_Delay>
	 /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	 /* Set the device refresh rate
	  * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
			  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	 HAL_SDRAM_ProgramRefreshRate(&hsdram1, 2792);   //2792, 1386
 8000334:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000338:	f640 21e8 	movw	r1, #2792	; 0xae8
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fde7 	bl	8001f10 <HAL_SDRAM_ProgramRefreshRate>

	 HAL_Delay(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f001 f820 	bl	8001388 <HAL_Delay>




  /* USER CODE END FMC_Init 2 */
}
 8000348:	bf00      	nop
 800034a:	3778      	adds	r7, #120	; 0x78
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	a0000140 	.word	0xa0000140

08000354 <LL_AHB1_GRP1_EnableClock>:
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4313      	orrs	r3, r2
 8000366:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4013      	ands	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40023800 	.word	0x40023800

08000384 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	041a      	lsls	r2, r3, #16
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	619a      	str	r2, [r3, #24]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <MX_GPIO_Init>:
#include "main.h"



void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	463b      	mov	r3, r7
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]

	/* GPIO Ports Clock Enable */

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ffca 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80003c0:	2002      	movs	r0, #2
 80003c2:	f7ff ffc7 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80003c6:	2004      	movs	r0, #4
 80003c8:	f7ff ffc4 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80003cc:	2008      	movs	r0, #8
 80003ce:	f7ff ffc1 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80003d2:	2010      	movs	r0, #16
 80003d4:	f7ff ffbe 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80003d8:	2020      	movs	r0, #32
 80003da:	f7ff ffbb 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 80003de:	2040      	movs	r0, #64	; 0x40
 80003e0:	f7ff ffb8 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80003e4:	2080      	movs	r0, #128	; 0x80
 80003e6:	f7ff ffb5 	bl	8000354 <LL_AHB1_GRP1_EnableClock>


	/**/
	LL_GPIO_ResetOutputPin(LCD_BUSY_GPIO_Port, LCD_BUSY_Pin);
 80003ea:	2104      	movs	r1, #4
 80003ec:	48b5      	ldr	r0, [pc, #724]	; (80006c4 <MX_GPIO_Init+0x320>)
 80003ee:	f7ff ffc9 	bl	8000384 <LL_GPIO_ResetOutputPin>
	PA7   ------> SPI1_MOSI
	PA15   ------> SPI1_NSS
	PB4   ------> SPI1_MISO
	*/

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7|LL_GPIO_PIN_15;
 80003f2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80003f6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80003f8:	2302      	movs	r3, #2
 80003fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80003fc:	2303      	movs	r3, #3
 80003fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000408:	2305      	movs	r3, #5
 800040a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	463b      	mov	r3, r7
 800040e:	4619      	mov	r1, r3
 8000410:	48ad      	ldr	r0, [pc, #692]	; (80006c8 <MX_GPIO_Init+0x324>)
 8000412:	f001 ffc4 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000416:	2310      	movs	r3, #16
 8000418:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800041a:	2302      	movs	r3, #2
 800041c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800041e:	2303      	movs	r3, #3
 8000420:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800042a:	2305      	movs	r3, #5
 800042c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	463b      	mov	r3, r7
 8000430:	4619      	mov	r1, r3
 8000432:	48a6      	ldr	r0, [pc, #664]	; (80006cc <MX_GPIO_Init+0x328>)
 8000434:	f001 ffb3 	bl	800239e <LL_GPIO_Init>
	PC2   ------> SPI2_MISO
	PC3   ------> SPI2_MOSI
	PB12   ------> SPI2_NSS
	PB13   ------> SPI2_SCK
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000438:	230c      	movs	r3, #12
 800043a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800043c:	2302      	movs	r3, #2
 800043e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000440:	2303      	movs	r3, #3
 8000442:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000448:	2300      	movs	r3, #0
 800044a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800044c:	2305      	movs	r3, #5
 800044e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000450:	463b      	mov	r3, r7
 8000452:	4619      	mov	r1, r3
 8000454:	489e      	ldr	r0, [pc, #632]	; (80006d0 <MX_GPIO_Init+0x32c>)
 8000456:	f001 ffa2 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 800045a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800045e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000460:	2302      	movs	r3, #2
 8000462:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000470:	2305      	movs	r3, #5
 8000472:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000474:	463b      	mov	r3, r7
 8000476:	4619      	mov	r1, r3
 8000478:	4894      	ldr	r0, [pc, #592]	; (80006cc <MX_GPIO_Init+0x328>)
 800047a:	f001 ff90 	bl	800239e <LL_GPIO_Init>

	/* LCD ****************************************************************************/

	GPIO_InitStruct.Pin = LCD_HSYNC_Pin ;
 800047e:	2340      	movs	r3, #64	; 0x40
 8000480:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000482:	2302      	movs	r3, #2
 8000484:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800048e:	2300      	movs	r3, #0
 8000490:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000492:	230e      	movs	r3, #14
 8000494:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	488d      	ldr	r0, [pc, #564]	; (80006d0 <MX_GPIO_Init+0x32c>)
 800049c:	f001 ff7f 	bl	800239e <LL_GPIO_Init>


	GPIO_InitStruct.Pin = LCD_VSYNC_Pin ;
 80004a0:	2310      	movs	r3, #16
 80004a2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80004a4:	2302      	movs	r3, #2
 80004a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80004b4:	230e      	movs	r3, #14
 80004b6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80004b8:	463b      	mov	r3, r7
 80004ba:	4619      	mov	r1, r3
 80004bc:	4882      	ldr	r0, [pc, #520]	; (80006c8 <MX_GPIO_Init+0x324>)
 80004be:	f001 ff6e 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_CLK_Pin ;
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80004c6:	2302      	movs	r3, #2
 80004c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80004d6:	230e      	movs	r3, #14
 80004d8:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_CLK_GPIO_Port, &GPIO_InitStruct);
 80004da:	463b      	mov	r3, r7
 80004dc:	4619      	mov	r1, r3
 80004de:	487d      	ldr	r0, [pc, #500]	; (80006d4 <MX_GPIO_Init+0x330>)
 80004e0:	f001 ff5d 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_BUSY_Pin;
 80004e4:	2304      	movs	r3, #4
 80004e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LCD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	4871      	ldr	r0, [pc, #452]	; (80006c4 <MX_GPIO_Init+0x320>)
 80004fe:	f001 ff4e 	bl	800239e <LL_GPIO_Init>
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(LCD_IRQ_GPIO_Port, &GPIO_InitStruct); */

	GPIO_InitStruct.Pin = LCD_DE_Pin;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000508:	2301      	movs	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	486e      	ldr	r0, [pc, #440]	; (80006d8 <MX_GPIO_Init+0x334>)
 800051e:	f001 ff3e 	bl	800239e <LL_GPIO_Init>
	/**/
	GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000522:	2308      	movs	r3, #8
 8000524:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000526:	2301      	movs	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000532:	2301      	movs	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000536:	463b      	mov	r3, r7
 8000538:	4619      	mov	r1, r3
 800053a:	4866      	ldr	r0, [pc, #408]	; (80006d4 <MX_GPIO_Init+0x330>)
 800053c:	f001 ff2f 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R2_Pin;
 8000540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000544:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000546:	2301      	movs	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000556:	230e      	movs	r3, #14
 8000558:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R2_GPIO_Port, &GPIO_InitStruct);
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	485c      	ldr	r0, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x32c>)
 8000560:	f001 ff1d 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R3_Pin;
 8000564:	2301      	movs	r3, #1
 8000566:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000568:	2301      	movs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000578:	230e      	movs	r3, #14
 800057a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R3_GPIO_Port, &GPIO_InitStruct);
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4852      	ldr	r0, [pc, #328]	; (80006cc <MX_GPIO_Init+0x328>)
 8000582:	f001 ff0c 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R4_Pin;
 8000586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800058a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800058c:	2301      	movs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800059c:	230e      	movs	r3, #14
 800059e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R4_GPIO_Port, &GPIO_InitStruct);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4848      	ldr	r0, [pc, #288]	; (80006c8 <MX_GPIO_Init+0x324>)
 80005a6:	f001 fefa 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R5_Pin;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80005c0:	230e      	movs	r3, #14
 80005c2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R5_GPIO_Port, &GPIO_InitStruct);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	483f      	ldr	r0, [pc, #252]	; (80006c8 <MX_GPIO_Init+0x324>)
 80005ca:	f001 fee8 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R6_Pin;
 80005ce:	2302      	movs	r3, #2
 80005d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005d2:	2301      	movs	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80005e2:	230e      	movs	r3, #14
 80005e4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R6_GPIO_Port, &GPIO_InitStruct);
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4838      	ldr	r0, [pc, #224]	; (80006cc <MX_GPIO_Init+0x328>)
 80005ec:	f001 fed7 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_R7_Pin;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000604:	230e      	movs	r3, #14
 8000606:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R7_GPIO_Port, &GPIO_InitStruct);
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	4831      	ldr	r0, [pc, #196]	; (80006d4 <MX_GPIO_Init+0x330>)
 800060e:	f001 fec6 	bl	800239e <LL_GPIO_Init>



	GPIO_InitStruct.Pin = LCD_G2_Pin;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000626:	230e      	movs	r3, #14
 8000628:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G2_GPIO_Port, &GPIO_InitStruct);
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4826      	ldr	r0, [pc, #152]	; (80006c8 <MX_GPIO_Init+0x324>)
 8000630:	f001 feb5 	bl	800239e <LL_GPIO_Init>


	GPIO_InitStruct.Pin = LCD_G3_Pin;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800063a:	2301      	movs	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800064a:	230e      	movs	r3, #14
 800064c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G3_GPIO_Port, &GPIO_InitStruct);
 800064e:	463b      	mov	r3, r7
 8000650:	4619      	mov	r1, r3
 8000652:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_GPIO_Init+0x330>)
 8000654:	f001 fea3 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_G4_Pin;
 8000658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800066e:	230e      	movs	r3, #14
 8000670:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G4_GPIO_Port, &GPIO_InitStruct);
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4815      	ldr	r0, [pc, #84]	; (80006cc <MX_GPIO_Init+0x328>)
 8000678:	f001 fe91 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_G5_Pin;
 800067c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000680:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000682:	2301      	movs	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000692:	230e      	movs	r3, #14
 8000694:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_GPIO_Init+0x328>)
 800069c:	f001 fe7f 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_G6_Pin;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80006b4:	230e      	movs	r3, #14
 80006b6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G6_GPIO_Port, &GPIO_InitStruct);
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0x32c>)
 80006be:	f001 fe6e 	bl	800239e <LL_GPIO_Init>
 80006c2:	e00b      	b.n	80006dc <MX_GPIO_Init+0x338>
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40021800 	.word	0x40021800
 80006d8:	40021400 	.word	0x40021400

	GPIO_InitStruct.Pin = LCD_G7_Pin;
 80006dc:	2308      	movs	r3, #8
 80006de:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80006f0:	230e      	movs	r3, #14
 80006f2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_G7_GPIO_Port, &GPIO_InitStruct);
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	486f      	ldr	r0, [pc, #444]	; (80008b8 <MX_GPIO_Init+0x514>)
 80006fa:	f001 fe50 	bl	800239e <LL_GPIO_Init>



	GPIO_InitStruct.Pin = LCD_B2_Pin;
 80006fe:	2340      	movs	r3, #64	; 0x40
 8000700:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000702:	2301      	movs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000712:	230e      	movs	r3, #14
 8000714:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_B2_GPIO_Port, &GPIO_InitStruct);
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4867      	ldr	r0, [pc, #412]	; (80008b8 <MX_GPIO_Init+0x514>)
 800071c:	f001 fe3f 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_B3_Pin;
 8000720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000724:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000726:	2301      	movs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8000736:	230e      	movs	r3, #14
 8000738:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_R3_GPIO_Port, &GPIO_InitStruct);
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	485f      	ldr	r0, [pc, #380]	; (80008bc <MX_GPIO_Init+0x518>)
 8000740:	f001 fe2d 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800075a:	230e      	movs	r3, #14
 800075c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4857      	ldr	r0, [pc, #348]	; (80008c0 <MX_GPIO_Init+0x51c>)
 8000764:	f001 fe1b 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_B5_Pin;
 8000768:	2308      	movs	r3, #8
 800076a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800076c:	2301      	movs	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800077c:	230e      	movs	r3, #14
 800077e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_B5_GPIO_Port, &GPIO_InitStruct);
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	484f      	ldr	r0, [pc, #316]	; (80008c4 <MX_GPIO_Init+0x520>)
 8000786:	f001 fe0a 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_B6_Pin;
 800078a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800078e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000790:	2301      	movs	r3, #1
 8000792:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80007a0:	230e      	movs	r3, #14
 80007a2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_B6_GPIO_Port, &GPIO_InitStruct);
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4844      	ldr	r0, [pc, #272]	; (80008bc <MX_GPIO_Init+0x518>)
 80007aa:	f001 fdf8 	bl	800239e <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_B7_Pin;
 80007ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b4:	2301      	movs	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80007c4:	230e      	movs	r3, #14
 80007c6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(LCD_B7_GPIO_Port, &GPIO_InitStruct);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	483b      	ldr	r0, [pc, #236]	; (80008bc <MX_GPIO_Init+0x518>)
 80007ce:	f001 fde6 	bl	800239e <LL_GPIO_Init>



  /**********************************SDRAM GPIO Configurations **********************************88/
  /* PORT F */
  GPIO_InitStruct.Pin =   LL_GPIO_PIN_0|
 80007d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007d6:	603b      	str	r3, [r7, #0]
						  LL_GPIO_PIN_11|
						  LL_GPIO_PIN_12|
						  LL_GPIO_PIN_13|
						  LL_GPIO_PIN_14|
						  LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007d8:	2302      	movs	r3, #2
 80007da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80007e8:	230c      	movs	r3, #12
 80007ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4835      	ldr	r0, [pc, #212]	; (80008c8 <MX_GPIO_Init+0x524>)
 80007f2:	f001 fdd4 	bl	800239e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|
 80007f6:	f248 1333 	movw	r3, #33075	; 0x8133
 80007fa:	603b      	str	r3, [r7, #0]
		                LL_GPIO_PIN_1|
						LL_GPIO_PIN_4|
						LL_GPIO_PIN_5|
						LL_GPIO_PIN_8|
						LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007fc:	2302      	movs	r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800080c:	230c      	movs	r3, #12
 800080e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	482a      	ldr	r0, [pc, #168]	; (80008c0 <MX_GPIO_Init+0x51c>)
 8000816:	f001 fdc2 	bl	800239e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|
 800081a:	2360      	movs	r3, #96	; 0x60
 800081c:	603b      	str	r3, [r7, #0]
		                LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800081e:	2302      	movs	r3, #2
 8000820:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800082e:	230c      	movs	r3, #12
 8000830:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4821      	ldr	r0, [pc, #132]	; (80008bc <MX_GPIO_Init+0x518>)
 8000838:	f001 fdb1 	bl	800239e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800083c:	2301      	movs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000840:	2302      	movs	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000850:	230c      	movs	r3, #12
 8000852:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	481c      	ldr	r0, [pc, #112]	; (80008cc <MX_GPIO_Init+0x528>)
 800085a:	f001 fda0 	bl	800239e <LL_GPIO_Init>


  GPIO_InitStruct.Pin =   LL_GPIO_PIN_0|
 800085e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000862:	603b      	str	r3, [r7, #0]
						  LL_GPIO_PIN_8|
						  LL_GPIO_PIN_9|
						  LL_GPIO_PIN_10|
						  LL_GPIO_PIN_14|
						  LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000864:	2302      	movs	r3, #2
 8000866:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000874:	230c      	movs	r3, #12
 8000876:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_GPIO_Init+0x514>)
 800087e:	f001 fd8e 	bl	800239e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|
 8000882:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000886:	603b      	str	r3, [r7, #0]
						LL_GPIO_PIN_11|
						LL_GPIO_PIN_12|
						LL_GPIO_PIN_13|
						LL_GPIO_PIN_14|
						LL_GPIO_PIN_15;
   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000888:	2302      	movs	r3, #2
 800088a:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8000898:	230c      	movs	r3, #12
 800089a:	617b      	str	r3, [r7, #20]
   LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x52c>)
 80008a2:	f001 fd7c 	bl	800239e <LL_GPIO_Init>





  LL_GPIO_ResetOutputPin(LCD_BL_GPIO_Port, LCD_BL_Pin);
 80008a6:	2108      	movs	r1, #8
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_GPIO_Init+0x51c>)
 80008aa:	f7ff fd6b 	bl	8000384 <LL_GPIO_ResetOutputPin>

}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40021400 	.word	0x40021400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40021000 	.word	0x40021000

080008d4 <main>:
__IO uint8_t *Lptr;

unsigned long long k =0;
uint8_t random;
int main(void)
{
 80008d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af02      	add	r7, sp, #8

	/* MCU Configuration--------------------------------------------------------*/



	system_init();
 80008dc:	f000 f8bc 	bl	8000a58 <system_init>


	// MX_SPI2_Init();
	// MX_SPI1_Init();

	HAL_Delay(2000);
 80008e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e4:	f000 fd50 	bl	8001388 <HAL_Delay>
	//
	for( k=0x0000; k< ( (480*272)*2); k= k+2)
 80008e8:	4953      	ldr	r1, [pc, #332]	; (8000a38 <main+0x164>)
 80008ea:	f04f 0200 	mov.w	r2, #0
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	e9c1 2300 	strd	r2, r3, [r1]
 80008f6:	e038      	b.n	800096a <main+0x96>
	{
		*(__IO uint8_t *) (LTDC_LAYER1_START_ADDRS + k + 1) = *(__IO uint8_t *) (LTDC_LAYER2_START_ADDRS + k + 1) = (uint8_t)0x00;
 80008f8:	4b4f      	ldr	r3, [pc, #316]	; (8000a38 <main+0x164>)
 80008fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fe:	494f      	ldr	r1, [pc, #316]	; (8000a3c <main+0x168>)
 8000900:	eb12 0801 	adds.w	r8, r2, r1
 8000904:	f143 0900 	adc.w	r9, r3, #0
 8000908:	4643      	mov	r3, r8
 800090a:	2000      	movs	r0, #0
 800090c:	4602      	mov	r2, r0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <main+0x164>)
 8000912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000916:	494a      	ldr	r1, [pc, #296]	; (8000a40 <main+0x16c>)
 8000918:	eb12 0a01 	adds.w	sl, r2, r1
 800091c:	f143 0b00 	adc.w	fp, r3, #0
 8000920:	4653      	mov	r3, sl
 8000922:	4602      	mov	r2, r0
 8000924:	701a      	strb	r2, [r3, #0]
		*(__IO uint8_t *) (LTDC_LAYER1_START_ADDRS + k + 2) = *(__IO uint8_t *) (LTDC_LAYER2_START_ADDRS + k + 2) = (uint8_t)0x00;
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <main+0x164>)
 8000928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092c:	4945      	ldr	r1, [pc, #276]	; (8000a44 <main+0x170>)
 800092e:	1851      	adds	r1, r2, r1
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	f143 0300 	adc.w	r3, r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	2000      	movs	r0, #0
 800093c:	4602      	mov	r2, r0
 800093e:	701a      	strb	r2, [r3, #0]
 8000940:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <main+0x164>)
 8000942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000946:	4940      	ldr	r1, [pc, #256]	; (8000a48 <main+0x174>)
 8000948:	1851      	adds	r1, r2, r1
 800094a:	6039      	str	r1, [r7, #0]
 800094c:	f143 0300 	adc.w	r3, r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	4602      	mov	r2, r0
 8000956:	701a      	strb	r2, [r3, #0]
	for( k=0x0000; k< ( (480*272)*2); k= k+2)
 8000958:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <main+0x164>)
 800095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095e:	1c94      	adds	r4, r2, #2
 8000960:	f143 0500 	adc.w	r5, r3, #0
 8000964:	4b34      	ldr	r3, [pc, #208]	; (8000a38 <main+0x164>)
 8000966:	e9c3 4500 	strd	r4, r5, [r3]
 800096a:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <main+0x164>)
 800096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000970:	f5b2 3f7f 	cmp.w	r2, #261120	; 0x3fc00
 8000974:	f173 0300 	sbcs.w	r3, r3, #0
 8000978:	d3be      	bcc.n	80008f8 <main+0x24>
	}
	LTDC_font_select(FONT_BRITANICA_BOLD18Pts);
 800097a:	2000      	movs	r0, #0
 800097c:	f003 fffa 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(10, 10, "ABCDEFGHIJWXYZabcd efg", LTDC_CAPA_DOS ,GREEN );
 8000980:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <main+0x178>)
 800098a:	210a      	movs	r1, #10
 800098c:	200a      	movs	r0, #10
 800098e:	f002 f803 	bl	8002998 <LTDC_put_string>


	LTDC_font_select(FONT_CENTURY_GOTHIC18Pts);
 8000992:	2001      	movs	r0, #1
 8000994:	f003 ffee 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(10, 40, "ABCDEFGHIJWXYZabcd efg", LTDC_CAPA_DOS ,0x07FF );
 8000998:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2301      	movs	r3, #1
 80009a0:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <main+0x178>)
 80009a2:	2128      	movs	r1, #40	; 0x28
 80009a4:	200a      	movs	r0, #10
 80009a6:	f001 fff7 	bl	8002998 <LTDC_put_string>


	LTDC_font_select(FONT_TIMES_NEW_ROMAN18Pts);
 80009aa:	2002      	movs	r0, #2
 80009ac:	f003 ffe2 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(10, 65, "GABCDEFGHIJWXYZabcd efg", LTDC_CAPA_DOS ,BLUE );
 80009b0:	f641 731f 	movw	r3, #7967	; 0x1f1f
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2301      	movs	r3, #1
 80009b8:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <main+0x17c>)
 80009ba:	2141      	movs	r1, #65	; 0x41
 80009bc:	200a      	movs	r0, #10
 80009be:	f001 ffeb 	bl	8002998 <LTDC_put_string>

	LTDC_font_select(FONT_TIMES_NEW_ROMAN8Pts);
 80009c2:	2004      	movs	r0, #4
 80009c4:	f003 ffd6 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(10, 100, "ABCDEFGHIJWXYZabcd efg", LTDC_CAPA_DOS ,CYAN );
 80009c8:	f247 7377 	movw	r3, #30583	; 0x7777
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	4a1e      	ldr	r2, [pc, #120]	; (8000a4c <main+0x178>)
 80009d2:	2164      	movs	r1, #100	; 0x64
 80009d4:	200a      	movs	r0, #10
 80009d6:	f001 ffdf 	bl	8002998 <LTDC_put_string>

	LTDC_font_select(FONT_TIMES_NEW_ROMAN48Pts);
 80009da:	2003      	movs	r0, #3
 80009dc:	f003 ffca 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(10, 120, "ABCDabcd efg", LTDC_CAPA_DOS ,0x07FF );
 80009e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <main+0x180>)
 80009ea:	2178      	movs	r1, #120	; 0x78
 80009ec:	200a      	movs	r0, #10
 80009ee:	f001 ffd3 	bl	8002998 <LTDC_put_string>

	LTDC_font_select(FONT_TIMES_NEW_ROMAN48Pts);
 80009f2:	2003      	movs	r0, #3
 80009f4:	f003 ffbe 	bl	8004974 <LTDC_font_select>
	LTDC_put_string(12, 122, "ABCDabcd efg", LTDC_CAPA_UNO ,BLUE );
 80009f8:	f641 731f 	movw	r3, #7967	; 0x1f1f
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <main+0x180>)
 8000a02:	217a      	movs	r1, #122	; 0x7a
 8000a04:	200c      	movs	r0, #12
 8000a06:	f001 ffc7 	bl	8002998 <LTDC_put_string>



	LTDC_draw_rectangle(0, 0, 240, 100, LTDC_CAPA_DOS,  BLUE);
 8000a0a:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	22f0      	movs	r2, #240	; 0xf0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f001 fe3e 	bl	800269c <LTDC_draw_rectangle>

	LTDC_draw_filled_rectangle(0, 150, 240, 250, LTDC_CAPA_DOS,  BLUE);
 8000a20:	f641 731f 	movw	r3, #7967	; 0x1f1f
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	2301      	movs	r3, #1
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	23fa      	movs	r3, #250	; 0xfa
 8000a2c:	22f0      	movs	r2, #240	; 0xf0
 8000a2e:	2196      	movs	r1, #150	; 0x96
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 ff21 	bl	8002878 <LTDC_draw_filled_rectangle>


	while (1)
 8000a36:	e7fe      	b.n	8000a36 <main+0x162>
 8000a38:	20000030 	.word	0x20000030
 8000a3c:	d003fc01 	.word	0xd003fc01
 8000a40:	d0000001 	.word	0xd0000001
 8000a44:	d003fc02 	.word	0xd003fc02
 8000a48:	d0000002 	.word	0xd0000002
 8000a4c:	08004b14 	.word	0x08004b14
 8000a50:	08004b2c 	.word	0x08004b2c
 8000a54:	08004b44 	.word	0x08004b44

08000a58 <system_init>:

}


static void system_init( void )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a5c:	f000 fc22 	bl	80012a4 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000a60:	f000 fb7c 	bl	800115c <SystemClock_Config>
	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000a64:	f000 fbc8 	bl	80011f8 <PeriphCommonClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a68:	f7ff fc9c 	bl	80003a4 <MX_GPIO_Init>
	/* Initialize MEDTLS lib */
	//MX_MBEDTLS_Init();
	/* Initialize FMC for external SD RAM */
	MX_FMC_Init();
 8000a6c:	f7ff fbd6 	bl	800021c <MX_FMC_Init>
	/* Initialize LTDC RGB LCD controller */
	MX_LTDC_Init();
 8000a70:	f001 fd3e 	bl	80024f0 <MX_LTDC_Init>

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08e      	sub	sp, #56	; 0x38
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a77      	ldr	r2, [pc, #476]	; (8000cd0 <HAL_LTDC_MspInit+0x1fc>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	f040 80e7 	bne.w	8000cc6 <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
 8000afc:	4b75      	ldr	r3, [pc, #468]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a74      	ldr	r2, [pc, #464]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
 8000b08:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a6d      	ldr	r2, [pc, #436]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 0320 	and.w	r3, r3, #32
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	4b67      	ldr	r3, [pc, #412]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a66      	ldr	r2, [pc, #408]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b64      	ldr	r3, [pc, #400]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	4b60      	ldr	r3, [pc, #384]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a5f      	ldr	r2, [pc, #380]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b56      	ldr	r3, [pc, #344]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a51      	ldr	r2, [pc, #324]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <HAL_LTDC_MspInit+0x200>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bce:	230e      	movs	r3, #14
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	483f      	ldr	r0, [pc, #252]	; (8000cd8 <HAL_LTDC_MspInit+0x204>)
 8000bda:	f000 fcdf 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000bde:	f641 0358 	movw	r3, #6232	; 0x1858
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf0:	230e      	movs	r3, #14
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4838      	ldr	r0, [pc, #224]	; (8000cdc <HAL_LTDC_MspInit+0x208>)
 8000bfc:	f000 fcce 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c00:	2303      	movs	r3, #3
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c10:	2309      	movs	r3, #9
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <HAL_LTDC_MspInit+0x20c>)
 8000c1c:	f000 fcbe 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000c20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c32:	230e      	movs	r3, #14
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <HAL_LTDC_MspInit+0x20c>)
 8000c3e:	f000 fcad 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000c42:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c54:	230e      	movs	r3, #14
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <HAL_LTDC_MspInit+0x210>)
 8000c60:	f000 fc9c 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c64:	23c0      	movs	r3, #192	; 0xc0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <HAL_LTDC_MspInit+0x214>)
 8000c80:	f000 fc8c 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c84:	2308      	movs	r3, #8
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c94:	230e      	movs	r3, #14
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4813      	ldr	r0, [pc, #76]	; (8000cec <HAL_LTDC_MspInit+0x218>)
 8000ca0:	f000 fc7c 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ca4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000cb6:	2309      	movs	r3, #9
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <HAL_LTDC_MspInit+0x210>)
 8000cc2:	f000 fc6b 	bl	800159c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40016800 	.word	0x40016800
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021400 	.word	0x40021400
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40020400 	.word	0x40020400
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d04:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <HAL_FMC_MspInit+0xe8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d160      	bne.n	8000dce <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_FMC_MspInit+0xe8>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <HAL_FMC_MspInit+0xec>)
 8000d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <HAL_FMC_MspInit+0xec>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_FMC_MspInit+0xec>)
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d2e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d40:	230c      	movs	r3, #12
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4825      	ldr	r0, [pc, #148]	; (8000de0 <HAL_FMC_MspInit+0xf0>)
 8000d4a:	f000 fc27 	bl	800159c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d4e:	230d      	movs	r3, #13
 8000d50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d5e:	230c      	movs	r3, #12
 8000d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <HAL_FMC_MspInit+0xf4>)
 8000d68:	f000 fc18 	bl	800159c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d6c:	f248 1317 	movw	r3, #33047	; 0x8117
 8000d70:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <HAL_FMC_MspInit+0xf8>)
 8000d88:	f000 fc08 	bl	800159c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d8c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <HAL_FMC_MspInit+0xfc>)
 8000da8:	f000 fbf8 	bl	800159c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000dac:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000db0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480a      	ldr	r0, [pc, #40]	; (8000df0 <HAL_FMC_MspInit+0x100>)
 8000dc8:	f000 fbe8 	bl	800159c <HAL_GPIO_Init>
 8000dcc:	e000      	b.n	8000dd0 <HAL_FMC_MspInit+0xe0>
    return;
 8000dce:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000038 	.word	0x20000038
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40021400 	.word	0x40021400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40021800 	.word	0x40021800
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40020c00 	.word	0x40020c00

08000df4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dfc:	f7ff ff78 	bl	8000cf0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 fa78 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <LL_RCC_HSE_Enable+0x1c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <LL_RCC_HSE_Enable+0x1c>)
 8000e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <LL_RCC_HSE_IsReady+0x24>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e8c:	bf0c      	ite	eq
 8000e8e:	2301      	moveq	r3, #1
 8000e90:	2300      	movne	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <LL_RCC_SetSysClkSource+0x24>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f023 0203 	bic.w	r2, r3, #3
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <LL_RCC_SetSysClkSource+0x24>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40023800 	.word	0x40023800

08000ecc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <LL_RCC_GetSysClkSource+0x18>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 030c 	and.w	r3, r3, #12
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <LL_RCC_SetAHBPrescaler+0x24>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40023800 	.word	0x40023800

08000f10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f20:	4904      	ldr	r1, [pc, #16]	; (8000f34 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40023800 	.word	0x40023800

08000f38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f48:	4904      	ldr	r1, [pc, #16]	; (8000f5c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40023800 	.word	0x40023800

08000f60 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <LL_RCC_SetTIMPrescaler+0x28>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40023800 	.word	0x40023800

08000f8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <LL_RCC_PLL_Enable+0x1c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <LL_RCC_PLL_Enable+0x1c>)
 8000f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <LL_RCC_PLL_IsReady+0x24>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	68f9      	ldr	r1, [r7, #12]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4311      	orrs	r1, r2
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	0192      	lsls	r2, r2, #6
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001004:	4904      	ldr	r1, [pc, #16]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	4313      	orrs	r3, r2
 800100a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40023800 	.word	0x40023800
 800101c:	ffbf8000 	.word	0xffbf8000

08001020 <LL_RCC_PLLSAI_Enable>:
  * @brief  Enable PLLSAI
  * @rmtoll CR           PLLSAION     LL_RCC_PLLSAI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_Enable(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <LL_RCC_PLLSAI_Enable+0x1c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <LL_RCC_PLLSAI_Enable+0x1c>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <LL_RCC_PLLSAI_IsReady>:
  * @brief  Check if PLLSAI Ready
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <LL_RCC_PLLSAI_IsReady+0x24>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800104c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <LL_RCC_PLLSAI_ConfigDomain_LTDC>:
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_8
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_LTDC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR, uint32_t PLLDIVR)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800107e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001082:	68f9      	ldr	r1, [r7, #12]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	430a      	orrs	r2, r1
 8001088:	490f      	ldr	r1, [pc, #60]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIR, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLR);
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 8001090:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x64>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	0191      	lsls	r1, r2, #6
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	4909      	ldr	r1, [pc, #36]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, PLLDIVR);
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010b2:	4905      	ldr	r1, [pc, #20]	; (80010c8 <LL_RCC_PLLSAI_ConfigDomain_LTDC+0x60>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40023800 	.word	0x40023800
 80010cc:	8fff803f 	.word	0x8fff803f

080010d0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <LL_FLASH_SetLatency+0x24>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 020f 	bic.w	r2, r3, #15
 80010e0:	4904      	ldr	r1, [pc, #16]	; (80010f4 <LL_FLASH_SetLatency+0x24>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <LL_FLASH_GetLatency+0x18>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <LL_PWR_EnableOverDriveMode+0x1c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <LL_PWR_EnableOverDriveMode+0x1c>)
 800111e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000

08001134 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40007000 	.word	0x40007000

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001160:	2005      	movs	r0, #5
 8001162:	f7ff ffb5 	bl	80010d0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001166:	bf00      	nop
 8001168:	f7ff ffc6 	bl	80010f8 <LL_FLASH_GetLatency>
 800116c:	4603      	mov	r3, r0
 800116e:	2b05      	cmp	r3, #5
 8001170:	d1fa      	bne.n	8001168 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001172:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001176:	f7ff ffdd 	bl	8001134 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 800117a:	f7ff ffcb 	bl	8001114 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 800117e:	f7ff fe6d 	bl	8000e5c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001182:	bf00      	nop
 8001184:	f7ff fe7a 	bl	8000e7c <LL_RCC_HSE_IsReady>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1fa      	bne.n	8001184 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
 800118e:	2300      	movs	r3, #0
 8001190:	22b4      	movs	r2, #180	; 0xb4
 8001192:	2104      	movs	r1, #4
 8001194:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001198:	f7ff ff1c 	bl	8000fd4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800119c:	f7ff fef6 	bl	8000f8c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011a0:	bf00      	nop
 80011a2:	f7ff ff03 	bl	8000fac <LL_RCC_PLL_IsReady>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1fa      	bne.n	80011a2 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fe9b 	bl	8000ee8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80011b2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80011b6:	f7ff feab 	bl	8000f10 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80011ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011be:	f7ff febb 	bl	8000f38 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff fe6e 	bl	8000ea4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011c8:	bf00      	nop
 80011ca:	f7ff fe7f 	bl	8000ecc <LL_RCC_GetSysClkSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d1fa      	bne.n	80011ca <SystemClock_Config+0x6e>
  {

  }
  LL_SetSystemCoreClock(180000000);
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <SystemClock_Config+0x98>)
 80011d6:	f001 f955 	bl	8002484 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f884 	bl	80012e8 <HAL_InitTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011e6:	f7ff fc47 	bl	8000a78 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff feb8 	bl	8000f60 <LL_RCC_SetTIMPrescaler>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0aba9500 	.word	0x0aba9500

080011f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af02      	add	r7, sp, #8
  //LL_RCC_PLLSAI_ConfigDomain_LTDC(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLSAIM_DIV_4, 60, LL_RCC_PLLSAIR_DIV_2, LL_RCC_PLLSAIDIVR_DIV_16);
	LL_RCC_PLLSAI_ConfigDomain_LTDC(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLSAIM_DIV_8, 120, LL_RCC_PLLSAIR_DIV_2, LL_RCC_PLLSAIDIVR_DIV_16);
 80011fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001208:	2278      	movs	r2, #120	; 0x78
 800120a:	2108      	movs	r1, #8
 800120c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001210:	f7ff ff2a 	bl	8001068 <LL_RCC_PLLSAI_ConfigDomain_LTDC>
  LL_RCC_PLLSAI_Enable();
 8001214:	f7ff ff04 	bl	8001020 <LL_RCC_PLLSAI_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLSAI_IsReady() != 1)
 8001218:	bf00      	nop
 800121a:	f7ff ff11 	bl	8001040 <LL_RCC_PLLSAI_IsReady>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d1fa      	bne.n	800121a <PeriphCommonClock_Config+0x22>
  {

  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopFillZerobss+0x26>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f003 fc19 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff fb27 	bl	80008d4 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001294:	0800e2a8 	.word	0x0800e2a8
  ldr r2, =_sbss
 8001298:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800129c:	20000160 	.word	0x20000160

080012a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 f931 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fbd4 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f93b 	bl	8001582 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f911 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	20000008 	.word	0x20000008
 8001344:	20000004 	.word	0x20000004

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000008 	.word	0x20000008
 800136c:	2000003c 	.word	0x2000003c

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000003c 	.word	0x2000003c

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff ffee 	bl	8001370 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ae:	bf00      	nop
 80013b0:	f7ff ffde 	bl	8001370 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e177      	b.n	80018a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8166 	bne.w	80018a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d130      	bne.n	8001650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b03      	cmp	r3, #3
 800165a:	d017      	beq.n	800168c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d123      	bne.n	80016e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0203 	and.w	r2, r3, #3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80c0 	beq.w	80018a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_GPIO_Init+0x324>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173e:	4a61      	ldr	r2, [pc, #388]	; (80018c4 <HAL_GPIO_Init+0x328>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_GPIO_Init+0x32c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d037      	beq.n	80017da <HAL_GPIO_Init+0x23e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x330>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d031      	beq.n	80017d6 <HAL_GPIO_Init+0x23a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d02b      	beq.n	80017d2 <HAL_GPIO_Init+0x236>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <HAL_GPIO_Init+0x338>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x232>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a54      	ldr	r2, [pc, #336]	; (80018d8 <HAL_GPIO_Init+0x33c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x22e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x340>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x22a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_GPIO_Init+0x344>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x226>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_GPIO_Init+0x348>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x222>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x34c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x21e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x350>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x21a>
 80017b2:	2309      	movs	r3, #9
 80017b4:	e012      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017b6:	230a      	movs	r3, #10
 80017b8:	e010      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ba:	2308      	movs	r3, #8
 80017bc:	e00e      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00c      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00a      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017c6:	2305      	movs	r3, #5
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ca:	2304      	movs	r3, #4
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e004      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_GPIO_Init+0x240>
 80017da:	2300      	movs	r3, #0
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f002 0203 	and.w	r2, r2, #3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4093      	lsls	r3, r2
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017ec:	4935      	ldr	r1, [pc, #212]	; (80018c4 <HAL_GPIO_Init+0x328>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_GPIO_Init+0x354>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184e:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_GPIO_Init+0x354>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <HAL_GPIO_Init+0x354>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3301      	adds	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b0f      	cmp	r3, #15
 80018ac:	f67f ae84 	bls.w	80015b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40022400 	.word	0x40022400
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0bf      	b.n	8001a86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f8da 	bl	8000ad4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001936:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6999      	ldr	r1, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800194c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6899      	ldr	r1, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_LTDC_Init+0x19c>)
 8001968:	400b      	ands	r3, r1
 800196a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6899      	ldr	r1, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68d9      	ldr	r1, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <HAL_LTDC_Init+0x19c>)
 8001996:	400b      	ands	r3, r1
 8001998:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68d9      	ldr	r1, [r3, #12]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6919      	ldr	r1, [r3, #16]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <HAL_LTDC_Init+0x19c>)
 80019c4:	400b      	ands	r3, r1
 80019c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6919      	ldr	r1, [r3, #16]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6959      	ldr	r1, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_LTDC_Init+0x19c>)
 80019f2:	400b      	ands	r3, r1
 80019f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6959      	ldr	r1, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0206 	orr.w	r2, r2, #6
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	f000f800 	.word	0xf000f800

08001a94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_LTDC_ConfigLayer+0x1a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e02c      	b.n	8001b08 <HAL_LTDC_ConfigLayer+0x74>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2134      	movs	r1, #52	; 0x34
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f811 	bl	8001b10 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2201      	movs	r2, #1
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bdb0      	pop	{r4, r5, r7, pc}

08001b10 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	4413      	add	r3, r2
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3384      	adds	r3, #132	; 0x84
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	4611      	mov	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	01d2      	lsls	r2, r2, #7
 8001b4c:	440a      	add	r2, r1
 8001b4e:	3284      	adds	r2, #132	; 0x84
 8001b50:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b54:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001b66:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001b68:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	01db      	lsls	r3, r3, #7
 8001b74:	440b      	add	r3, r1
 8001b76:	3384      	adds	r3, #132	; 0x84
 8001b78:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001b7e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8e:	4413      	add	r3, r2
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3384      	adds	r3, #132	; 0x84
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	01d2      	lsls	r2, r2, #7
 8001bae:	440a      	add	r2, r1
 8001bb0:	3284      	adds	r2, #132	; 0x84
 8001bb2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001bb6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc6:	4413      	add	r3, r2
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3384      	adds	r3, #132	; 0x84
 8001bd8:	4619      	mov	r1, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	01db      	lsls	r3, r3, #7
 8001bea:	4413      	add	r3, r2
 8001bec:	3384      	adds	r3, #132	; 0x84
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	01d2      	lsls	r2, r2, #7
 8001bfa:	440a      	add	r2, r1
 8001bfc:	3284      	adds	r2, #132	; 0x84
 8001bfe:	f023 0307 	bic.w	r3, r3, #7
 8001c02:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	01db      	lsls	r3, r3, #7
 8001c0e:	4413      	add	r3, r2
 8001c10:	3384      	adds	r3, #132	; 0x84
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	4413      	add	r3, r2
 8001c42:	3384      	adds	r3, #132	; 0x84
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	01db      	lsls	r3, r3, #7
 8001c50:	4413      	add	r3, r2
 8001c52:	3384      	adds	r3, #132	; 0x84
 8001c54:	461a      	mov	r2, r3
 8001c56:	2300      	movs	r3, #0
 8001c58:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c60:	461a      	mov	r2, r3
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	440b      	add	r3, r1
 8001c76:	3384      	adds	r3, #132	; 0x84
 8001c78:	4619      	mov	r1, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	01db      	lsls	r3, r3, #7
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3384      	adds	r3, #132	; 0x84
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4611      	mov	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	01d2      	lsls	r2, r2, #7
 8001c9a:	440a      	add	r2, r1
 8001c9c:	3284      	adds	r2, #132	; 0x84
 8001c9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ca2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	01db      	lsls	r3, r3, #7
 8001cae:	4413      	add	r3, r2
 8001cb0:	3384      	adds	r3, #132	; 0x84
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	01db      	lsls	r3, r3, #7
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3384      	adds	r3, #132	; 0x84
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	01d2      	lsls	r2, r2, #7
 8001cd4:	440a      	add	r2, r1
 8001cd6:	3284      	adds	r2, #132	; 0x84
 8001cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cdc:	f023 0307 	bic.w	r3, r3, #7
 8001ce0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	68f9      	ldr	r1, [r7, #12]
 8001cec:	6809      	ldr	r1, [r1, #0]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	01c9      	lsls	r1, r1, #7
 8001cf4:	4401      	add	r1, r0
 8001cf6:	3184      	adds	r1, #132	; 0x84
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	4413      	add	r3, r2
 8001d08:	3384      	adds	r3, #132	; 0x84
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	01db      	lsls	r3, r3, #7
 8001d16:	4413      	add	r3, r2
 8001d18:	3384      	adds	r3, #132	; 0x84
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	01db      	lsls	r3, r3, #7
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3384      	adds	r3, #132	; 0x84
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d102      	bne.n	8001d44 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e01b      	b.n	8001d7c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	e014      	b.n	8001d7c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d00b      	beq.n	8001d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d007      	beq.n	8001d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d003      	beq.n	8001d72 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001d6e:	2b07      	cmp	r3, #7
 8001d70:	d102      	bne.n	8001d78 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e001      	b.n	8001d7c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	01db      	lsls	r3, r3, #7
 8001d86:	4413      	add	r3, r2
 8001d88:	3384      	adds	r3, #132	; 0x84
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4611      	mov	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	01d2      	lsls	r2, r2, #7
 8001d96:	440a      	add	r2, r1
 8001d98:	3284      	adds	r2, #132	; 0x84
 8001d9a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8001d9e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	fb02 f303 	mul.w	r3, r2, r3
 8001daa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	1acb      	subs	r3, r1, r3
 8001db6:	69f9      	ldr	r1, [r7, #28]
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8001dbe:	68f9      	ldr	r1, [r7, #12]
 8001dc0:	6809      	ldr	r1, [r1, #0]
 8001dc2:	4608      	mov	r0, r1
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	01c9      	lsls	r1, r1, #7
 8001dc8:	4401      	add	r1, r0
 8001dca:	3184      	adds	r1, #132	; 0x84
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	01db      	lsls	r3, r3, #7
 8001dda:	4413      	add	r3, r2
 8001ddc:	3384      	adds	r3, #132	; 0x84
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4611      	mov	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	01d2      	lsls	r2, r2, #7
 8001dea:	440a      	add	r2, r1
 8001dec:	3284      	adds	r2, #132	; 0x84
 8001dee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001df2:	f023 0307 	bic.w	r3, r3, #7
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	4413      	add	r3, r2
 8001e04:	3384      	adds	r3, #132	; 0x84
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	4413      	add	r3, r2
 8001e1a:	3384      	adds	r3, #132	; 0x84
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	4611      	mov	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	01d2      	lsls	r2, r2, #7
 8001e28:	440a      	add	r2, r1
 8001e2a:	3284      	adds	r2, #132	; 0x84
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e025      	b.n	8001e9e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7fe ffc4 	bl	8000df4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 f86e 	bl	8001f60 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	f000 f8c3 	bl	800201a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001eb8:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e021      	b.n	8001f08 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d002      	beq.n	8001ed0 <HAL_SDRAM_SendCommand+0x2a>
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d118      	bne.n	8001f02 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f903 	bl	80020ec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d104      	bne.n	8001ef8 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001ef6:	e006      	b.n	8001f06 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8001f00:	e001      	b.n	8001f06 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d101      	bne.n	8001f2a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	e016      	b.n	8001f58 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10f      	bne.n	8001f56 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6839      	ldr	r1, [r7, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f90e 	bl	8002166 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d123      	bne.n	8001fba <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6851      	ldr	r1, [r2, #4]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6892      	ldr	r2, [r2, #8]
 8001f86:	4311      	orrs	r1, r2
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6912      	ldr	r2, [r2, #16]
 8001f92:	4311      	orrs	r1, r2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	6952      	ldr	r2, [r2, #20]
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6992      	ldr	r2, [r2, #24]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	69d2      	ldr	r2, [r2, #28]
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	6a12      	ldr	r2, [r2, #32]
 8001faa:	4311      	orrs	r1, r2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e028      	b.n	800200c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	69d9      	ldr	r1, [r3, #28]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4319      	orrs	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fe0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	6851      	ldr	r1, [r2, #4]
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	6892      	ldr	r2, [r2, #8]
 8001fec:	4311      	orrs	r1, r2
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	68d2      	ldr	r2, [r2, #12]
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	6912      	ldr	r2, [r2, #16]
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6952      	ldr	r2, [r2, #20]
 8001ffe:	4311      	orrs	r1, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	6992      	ldr	r2, [r2, #24]
 8002004:	430a      	orrs	r2, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d128      	bne.n	800207e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1e59      	subs	r1, r3, #1
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4319      	orrs	r1, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	4319      	orrs	r1, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	3b01      	subs	r3, #1
 8002054:	031b      	lsls	r3, r3, #12
 8002056:	4319      	orrs	r1, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	3b01      	subs	r3, #1
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	4319      	orrs	r1, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	3b01      	subs	r3, #1
 8002068:	051b      	lsls	r3, r3, #20
 800206a:	4319      	orrs	r1, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	3b01      	subs	r3, #1
 8002072:	061b      	lsls	r3, r3, #24
 8002074:	430b      	orrs	r3, r1
 8002076:	431a      	orrs	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e02f      	b.n	80020de <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	68d2      	ldr	r2, [r2, #12]
 800208e:	3a01      	subs	r2, #1
 8002090:	0311      	lsls	r1, r2, #12
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	6952      	ldr	r2, [r2, #20]
 8002096:	3a01      	subs	r2, #1
 8002098:	0512      	lsls	r2, r2, #20
 800209a:	430a      	orrs	r2, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	1e59      	subs	r1, r3, #1
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4319      	orrs	r1, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	3b01      	subs	r3, #1
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	4319      	orrs	r1, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	4319      	orrs	r1, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	430b      	orrs	r3, r1
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	0d9b      	lsrs	r3, r3, #22
 8002102:	059b      	lsls	r3, r3, #22
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	6811      	ldr	r1, [r2, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	6852      	ldr	r2, [r2, #4]
 800210c:	4311      	orrs	r1, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	6892      	ldr	r2, [r2, #8]
 8002112:	3a01      	subs	r2, #1
 8002114:	0152      	lsls	r2, r2, #5
 8002116:	4311      	orrs	r1, r2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	68d2      	ldr	r2, [r2, #12]
 800211c:	0252      	lsls	r2, r2, #9
 800211e:	430a      	orrs	r2, r1
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8002126:	f7ff f923 	bl	8001370 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800212c:	e010      	b.n	8002150 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d00c      	beq.n	8002150 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <FMC_SDRAM_SendCommand+0x60>
 800213c:	f7ff f918 	bl	8001370 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d201      	bcs.n	8002150 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e006      	b.n	800215e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b20      	cmp	r3, #32
 800215a:	d0e8      	beq.n	800212e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002178:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	0052      	lsls	r2, r2, #1
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_GPIO_SetPinMode>:
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2103      	movs	r1, #3
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	61bb      	str	r3, [r7, #24]
  return result;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_GPIO_SetPinOutputType>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_GPIO_SetPinSpeed>:
{
 8002222:	b480      	push	{r7}
 8002224:	b089      	sub	sp, #36	; 0x24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	613b      	str	r3, [r7, #16]
  return result;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2103      	movs	r1, #3
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	61bb      	str	r3, [r7, #24]
  return result;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	431a      	orrs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3724      	adds	r7, #36	; 0x24
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_GPIO_SetPinPull>:
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	613b      	str	r3, [r7, #16]
  return result;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2103      	movs	r1, #3
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	61bb      	str	r3, [r7, #24]
  return result;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	60da      	str	r2, [r3, #12]
}
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_GPIO_SetAFPin_0_7>:
{
 80022de:	b480      	push	{r7}
 80022e0:	b089      	sub	sp, #36	; 0x24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a1a      	ldr	r2, [r3, #32]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	613b      	str	r3, [r7, #16]
  return result;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	210f      	movs	r1, #15
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	61bb      	str	r3, [r7, #24]
  return result;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	621a      	str	r2, [r3, #32]
}
 8002330:	bf00      	nop
 8002332:	3724      	adds	r7, #36	; 0x24
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_GPIO_SetAFPin_8_15>:
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	613b      	str	r3, [r7, #16]
  return result;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	210f      	movs	r1, #15
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	401a      	ands	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	61bb      	str	r3, [r7, #24]
  return result;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	431a      	orrs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002392:	bf00      	nop
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	613b      	str	r3, [r7, #16]
  return result;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023c8:	e050      	b.n	800246c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2101      	movs	r1, #1
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d042      	beq.n	8002466 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d003      	beq.n	80023f0 <LL_GPIO_Init+0x52>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d10d      	bne.n	800240c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	461a      	mov	r2, r3
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff12 	bl	8002222 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	461a      	mov	r2, r3
 8002404:	69b9      	ldr	r1, [r7, #24]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fef3 	bl	80021f2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	461a      	mov	r2, r3
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff33 	bl	8002280 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d11a      	bne.n	8002458 <LL_GPIO_Init+0xba>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	60bb      	str	r3, [r7, #8]
  return result;
 800242e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b07      	cmp	r3, #7
 8002438:	d807      	bhi.n	800244a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	461a      	mov	r2, r3
 8002440:	69b9      	ldr	r1, [r7, #24]
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff4b 	bl	80022de <LL_GPIO_SetAFPin_0_7>
 8002448:	e006      	b.n	8002458 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	461a      	mov	r2, r3
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff72 	bl	800233c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fe97 	bl	8002194 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3301      	adds	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1a7      	bne.n	80023ca <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800248c:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <LL_SetSystemCoreClock+0x1c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000

080024a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b0:	4907      	ldr	r1, [pc, #28]	; (80024d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80024ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40023800 	.word	0x40023800

080024d4 <LL_GPIO_SetOutputPin>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	619a      	str	r2, [r3, #24]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <MX_LTDC_Init>:
LTDC_HandleTypeDef hltdc;
LTDC_LayerCfgTypeDef pLayerCfg = {0};
LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
uint32_t stringHead =0;
void MX_LTDC_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

	/* USER CODE END LTDC_Init 0 */



	LL_GPIO_SetOutputPin(LCD_BL_GPIO_Port, LCD_BL_Pin);
 80024f4:	2108      	movs	r1, #8
 80024f6:	4863      	ldr	r0, [pc, #396]	; (8002684 <MX_LTDC_Init+0x194>)
 80024f8:	f7ff ffec 	bl	80024d4 <LL_GPIO_SetOutputPin>

	/* USER CODE BEGIN LTDC_Init 1 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_LTDC);
 80024fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002500:	f7ff ffd0 	bl	80024a4 <LL_APB2_GRP1_EnableClock>
	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8002504:	4b60      	ldr	r3, [pc, #384]	; (8002688 <MX_LTDC_Init+0x198>)
 8002506:	4a61      	ldr	r2, [pc, #388]	; (800268c <MX_LTDC_Init+0x19c>)
 8002508:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <MX_LTDC_Init+0x198>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002510:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <MX_LTDC_Init+0x198>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002516:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <MX_LTDC_Init+0x198>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800251c:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <MX_LTDC_Init+0x198>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 15;
 8002522:	4b59      	ldr	r3, [pc, #356]	; (8002688 <MX_LTDC_Init+0x198>)
 8002524:	220f      	movs	r2, #15
 8002526:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 15;
 8002528:	4b57      	ldr	r3, [pc, #348]	; (8002688 <MX_LTDC_Init+0x198>)
 800252a:	220f      	movs	r2, #15
 800252c:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <MX_LTDC_Init+0x198>)
 8002530:	220e      	movs	r2, #14
 8002532:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8002534:	4b54      	ldr	r3, [pc, #336]	; (8002688 <MX_LTDC_Init+0x198>)
 8002536:	2205      	movs	r2, #5
 8002538:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 494;
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <MX_LTDC_Init+0x198>)
 800253c:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 277;
 8002542:	4b51      	ldr	r3, [pc, #324]	; (8002688 <MX_LTDC_Init+0x198>)
 8002544:	f240 1215 	movw	r2, #277	; 0x115
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 500;
 800254a:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <MX_LTDC_Init+0x198>)
 800254c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 279;
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <MX_LTDC_Init+0x198>)
 8002554:	f240 1217 	movw	r2, #279	; 0x117
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0x00;
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <MX_LTDC_Init+0x198>)
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Red = 0x00;
 8002562:	4b49      	ldr	r3, [pc, #292]	; (8002688 <MX_LTDC_Init+0x198>)
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Green = 0x00;
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <MX_LTDC_Init+0x198>)
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002572:	4845      	ldr	r0, [pc, #276]	; (8002688 <MX_LTDC_Init+0x198>)
 8002574:	f7ff f9be 	bl	80018f4 <HAL_LTDC_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_LTDC_Init+0x92>
	{
		Error_Handler();
 800257e:	f7fe fa7b 	bl	8000a78 <Error_Handler>
	}

	pLayerCfg.WindowX0 = 0;
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <MX_LTDC_Init+0x1a0>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
	pLayerCfg.WindowX1 = LTDC_LAYER1_WIDTH-1;
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <MX_LTDC_Init+0x1a0>)
 800258a:	f240 12df 	movw	r2, #479	; 0x1df
 800258e:	605a      	str	r2, [r3, #4]
	pLayerCfg.WindowY0 = 0;
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <MX_LTDC_Init+0x1a0>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
	pLayerCfg.WindowY1 = LTDC_LAYER1_HEIGHT-1;
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <MX_LTDC_Init+0x1a0>)
 8002598:	f240 120f 	movw	r2, #271	; 0x10f
 800259c:	60da      	str	r2, [r3, #12]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;//LTDC_PIXEL_FORMAT_ARGB8888;
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	611a      	str	r2, [r3, #16]
	pLayerCfg.Alpha = 100;
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025a6:	2264      	movs	r2, #100	; 0x64
 80025a8:	615a      	str	r2, [r3, #20]
	pLayerCfg.Alpha0 = 100;
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025ac:	2264      	movs	r2, #100	; 0x64
 80025ae:	619a      	str	r2, [r3, #24]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b6:	61da      	str	r2, [r3, #28]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025ba:	2205      	movs	r2, #5
 80025bc:	621a      	str	r2, [r3, #32]
	pLayerCfg.FBStartAdress = (uint32_t)LTDC_LAYER1_START_ADDRS;
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025c0:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
	pLayerCfg.ImageWidth = LTDC_LAYER1_WIDTH;
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
	pLayerCfg.ImageHeight = LTDC_LAYER1_HEIGHT;
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025d0:	f44f 7288 	mov.w	r2, #272	; 0x110
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
	pLayerCfg.Backcolor.Blue = 0;
 80025d6:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pLayerCfg.Backcolor.Green = 0;
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	pLayerCfg.Backcolor.Red = 0;
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80025ee:	2200      	movs	r2, #0
 80025f0:	4927      	ldr	r1, [pc, #156]	; (8002690 <MX_LTDC_Init+0x1a0>)
 80025f2:	4825      	ldr	r0, [pc, #148]	; (8002688 <MX_LTDC_Init+0x198>)
 80025f4:	f7ff fa4e 	bl	8001a94 <HAL_LTDC_ConfigLayer>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_LTDC_Init+0x112>
	{
		Error_Handler();
 80025fe:	f7fe fa3b 	bl	8000a78 <Error_Handler>
	}

	pLayerCfg1.WindowX0 = 0;
 8002602:	4b24      	ldr	r3, [pc, #144]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
	pLayerCfg1.WindowX1 = LTDC_LAYER2_WIDTH-1;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <MX_LTDC_Init+0x1a4>)
 800260a:	f240 12df 	movw	r2, #479	; 0x1df
 800260e:	605a      	str	r2, [r3, #4]
	pLayerCfg1.WindowY0 = 0;
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
	pLayerCfg1.WindowY1 = LTDC_LAYER2_HEIGHT-1;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002618:	f240 120f 	movw	r2, #271	; 0x10f
 800261c:	60da      	str	r2, [r3, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002620:	2202      	movs	r2, #2
 8002622:	611a      	str	r2, [r3, #16]
	pLayerCfg1.Alpha = 100;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002626:	2264      	movs	r2, #100	; 0x64
 8002628:	615a      	str	r2, [r3, #20]
	pLayerCfg1.Alpha0 = 100;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_LTDC_Init+0x1a4>)
 800262c:	2264      	movs	r2, #100	; 0x64
 800262e:	619a      	str	r2, [r3, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	61da      	str	r2, [r3, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <MX_LTDC_Init+0x1a4>)
 800263a:	2205      	movs	r2, #5
 800263c:	621a      	str	r2, [r3, #32]
	pLayerCfg1.FBStartAdress = (uint32_t)LTDC_LAYER2_START_ADDRS;//LTDC_ram;//&sampleArr[0];
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <MX_LTDC_Init+0x1a8>)
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
	pLayerCfg1.ImageWidth = LTDC_LAYER2_WIDTH;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002646:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
	pLayerCfg1.ImageHeight = LTDC_LAYER2_HEIGHT;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_LTDC_Init+0x1a4>)
 800264e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c
	pLayerCfg1.Backcolor.Blue = 0x00;
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pLayerCfg1.Backcolor.Green = 0x00;
 800265c:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <MX_LTDC_Init+0x1a4>)
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	pLayerCfg1.Backcolor.Red = 0x00;
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800266c:	2201      	movs	r2, #1
 800266e:	4909      	ldr	r1, [pc, #36]	; (8002694 <MX_LTDC_Init+0x1a4>)
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_LTDC_Init+0x198>)
 8002672:	f7ff fa0f 	bl	8001a94 <HAL_LTDC_ConfigLayer>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_LTDC_Init+0x190>
	{
		Error_Handler();
 800267c:	f7fe f9fc 	bl	8000a78 <Error_Handler>
	}


}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021800 	.word	0x40021800
 8002688:	2000004c 	.word	0x2000004c
 800268c:	40016800 	.word	0x40016800
 8002690:	200000f4 	.word	0x200000f4
 8002694:	20000128 	.word	0x20000128
 8002698:	d003fc00 	.word	0xd003fc00

0800269c <LTDC_draw_rectangle>:


void LTDC_draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t layer,  uint16_t colour)
{
 800269c:	b490      	push	{r4, r7}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4604      	mov	r4, r0
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	80fb      	strh	r3, [r7, #6]
 80026ae:	4603      	mov	r3, r0
 80026b0:	80bb      	strh	r3, [r7, #4]
 80026b2:	460b      	mov	r3, r1
 80026b4:	807b      	strh	r3, [r7, #2]
 80026b6:	4613      	mov	r3, r2
 80026b8:	803b      	strh	r3, [r7, #0]
	uint32_t layerWidth = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
	__IO uint8_t *sdRamPtr = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
	uint16 i;
	uint8_t pixelWidth = 2;
 80026c2:	2302      	movs	r3, #2
 80026c4:	737b      	strb	r3, [r7, #13]

	if( layer == LTDC_CAPA_UNO)
 80026c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d117      	bne.n	80026fe <LTDC_draw_rectangle+0x62>
		{
			layerWidth = LTDC_LAYER1_WIDTH;
 80026ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80026d2:	617b      	str	r3, [r7, #20]
			stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	7b7a      	ldrb	r2, [r7, #13]
 80026d8:	6979      	ldr	r1, [r7, #20]
 80026da:	fb01 f202 	mul.w	r2, r1, r2
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	88fa      	ldrh	r2, [r7, #6]
 80026e4:	3201      	adds	r2, #1
 80026e6:	7b79      	ldrb	r1, [r7, #13]
 80026e8:	fb01 f202 	mul.w	r2, r1, r2
 80026ec:	4413      	add	r3, r2
 80026ee:	4a61      	ldr	r2, [pc, #388]	; (8002874 <LTDC_draw_rectangle+0x1d8>)
 80026f0:	6013      	str	r3, [r2, #0]
			sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER1_START_ADDRS + stringHead);
 80026f2:	4b60      	ldr	r3, [pc, #384]	; (8002874 <LTDC_draw_rectangle+0x1d8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e018      	b.n	8002730 <LTDC_draw_rectangle+0x94>
		}
		else
		{
			layerWidth = LTDC_LAYER2_WIDTH;
 80026fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002702:	617b      	str	r3, [r7, #20]
			stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 8002704:	88bb      	ldrh	r3, [r7, #4]
 8002706:	7b7a      	ldrb	r2, [r7, #13]
 8002708:	6979      	ldr	r1, [r7, #20]
 800270a:	fb01 f202 	mul.w	r2, r1, r2
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	3201      	adds	r2, #1
 8002716:	7b79      	ldrb	r1, [r7, #13]
 8002718:	fb01 f202 	mul.w	r2, r1, r2
 800271c:	4413      	add	r3, r2
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <LTDC_draw_rectangle+0x1d8>)
 8002720:	6013      	str	r3, [r2, #0]
			sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER2_START_ADDRS + stringHead);
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <LTDC_draw_rectangle+0x1d8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 800272a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800272e:	613b      	str	r3, [r7, #16]
		}


	for(i=0; i< ((x1 - x0)); i++)
 8002730:	2300      	movs	r3, #0
 8002732:	81fb      	strh	r3, [r7, #14]
 8002734:	e043      	b.n	80027be <LTDC_draw_rectangle+0x122>
	{
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * 0 )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	7b7a      	ldrb	r2, [r7, #13]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	461a      	mov	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * 0 )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 800274a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	b299      	uxth	r1, r3
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	7b7a      	ldrb	r2, [r7, #13]
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	3301      	adds	r3, #1
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	b2ca      	uxtb	r2, r1
 8002760:	701a      	strb	r2, [r3, #0]

		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * ((y1-x0)-1) )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	8839      	ldrh	r1, [r7, #0]
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	1a8a      	subs	r2, r1, r2
 8002770:	3a01      	subs	r2, #1
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	89fa      	ldrh	r2, [r7, #14]
 8002778:	7b79      	ldrb	r1, [r7, #13]
 800277a:	fb01 f202 	mul.w	r2, r1, r2
 800277e:	4413      	add	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * ((y1-x0)-1) )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 800278a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b298      	uxth	r0, r3
 8002790:	7b7b      	ldrb	r3, [r7, #13]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	8839      	ldrh	r1, [r7, #0]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	1a8a      	subs	r2, r1, r2
 800279e:	3a01      	subs	r2, #1
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	89fa      	ldrh	r2, [r7, #14]
 80027a6:	7b79      	ldrb	r1, [r7, #13]
 80027a8:	fb01 f202 	mul.w	r2, r1, r2
 80027ac:	4413      	add	r3, r2
 80027ae:	3301      	adds	r3, #1
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	b2c2      	uxtb	r2, r0
 80027b6:	701a      	strb	r2, [r3, #0]
	for(i=0; i< ((x1 - x0)); i++)
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	3301      	adds	r3, #1
 80027bc:	81fb      	strh	r3, [r7, #14]
 80027be:	89fa      	ldrh	r2, [r7, #14]
 80027c0:	8879      	ldrh	r1, [r7, #2]
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	1acb      	subs	r3, r1, r3
 80027c6:	429a      	cmp	r2, r3
 80027c8:	dbb5      	blt.n	8002736 <LTDC_draw_rectangle+0x9a>
	}

	for(i=0; i< ((y1 - y0)); i++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	81fb      	strh	r3, [r7, #14]
 80027ce:	e045      	b.n	800285c <LTDC_draw_rectangle+0x1c0>
	{
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * i ) /*+ ( i *pixelWidth) */) = colour & 0xFF;
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	fb02 f303 	mul.w	r3, r2, r3
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * i ) /*+ ( i *pixelWidth) +1 */) = (colour>>8) & 0xFF;
 80027e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b299      	uxth	r1, r3
 80027ee:	7b7b      	ldrb	r3, [r7, #13]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	89fa      	ldrh	r2, [r7, #14]
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]

		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * i) + ( pixelWidth * (x1-x0) ) ) = colour & 0xFF;
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	89fa      	ldrh	r2, [r7, #14]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	7b7a      	ldrb	r2, [r7, #13]
 8002814:	8878      	ldrh	r0, [r7, #2]
 8002816:	88f9      	ldrh	r1, [r7, #6]
 8002818:	1a41      	subs	r1, r0, r1
 800281a:	fb01 f202 	mul.w	r2, r1, r2
 800281e:	4413      	add	r3, r2
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
		*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * i) + ( pixelWidth *(x1-x0)) +1) = (colour>>8) & 0xFF;
 800282a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29c      	uxth	r4, r3
 8002830:	7b7b      	ldrb	r3, [r7, #13]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	89fa      	ldrh	r2, [r7, #14]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	7b7a      	ldrb	r2, [r7, #13]
 8002840:	8878      	ldrh	r0, [r7, #2]
 8002842:	88f9      	ldrh	r1, [r7, #6]
 8002844:	1a41      	subs	r1, r0, r1
 8002846:	fb01 f202 	mul.w	r2, r1, r2
 800284a:	4413      	add	r3, r2
 800284c:	3301      	adds	r3, #1
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	b2e2      	uxtb	r2, r4
 8002854:	701a      	strb	r2, [r3, #0]
	for(i=0; i< ((y1 - y0)); i++)
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	3301      	adds	r3, #1
 800285a:	81fb      	strh	r3, [r7, #14]
 800285c:	89fa      	ldrh	r2, [r7, #14]
 800285e:	8839      	ldrh	r1, [r7, #0]
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	1acb      	subs	r3, r1, r3
 8002864:	429a      	cmp	r2, r3
 8002866:	dbb3      	blt.n	80027d0 <LTDC_draw_rectangle+0x134>
	}


}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bc90      	pop	{r4, r7}
 8002872:	4770      	bx	lr
 8002874:	2000015c 	.word	0x2000015c

08002878 <LTDC_draw_filled_rectangle>:


 void LTDC_draw_filled_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t layer,  uint16_t colour)
{
 8002878:	b490      	push	{r4, r7}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	4604      	mov	r4, r0
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4623      	mov	r3, r4
 8002888:	80fb      	strh	r3, [r7, #6]
 800288a:	4603      	mov	r3, r0
 800288c:	80bb      	strh	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	807b      	strh	r3, [r7, #2]
 8002892:	4613      	mov	r3, r2
 8002894:	803b      	strh	r3, [r7, #0]
	uint32_t layerWidth = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
	__IO uint8_t *sdRamPtr = 0x00;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
	uint16 i;
	uint16 j;
	uint8_t pixelWidth = 2;
 800289e:	2302      	movs	r3, #2
 80028a0:	72fb      	strb	r3, [r7, #11]

	if( layer == LTDC_CAPA_UNO)
 80028a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d117      	bne.n	80028da <LTDC_draw_filled_rectangle+0x62>
		{
			layerWidth = LTDC_LAYER1_WIDTH;
 80028aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028ae:	617b      	str	r3, [r7, #20]
			stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 80028b0:	88bb      	ldrh	r3, [r7, #4]
 80028b2:	7afa      	ldrb	r2, [r7, #11]
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	fb01 f202 	mul.w	r2, r1, r2
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	3201      	adds	r2, #1
 80028c2:	7af9      	ldrb	r1, [r7, #11]
 80028c4:	fb01 f202 	mul.w	r2, r1, r2
 80028c8:	4413      	add	r3, r2
 80028ca:	4a32      	ldr	r2, [pc, #200]	; (8002994 <LTDC_draw_filled_rectangle+0x11c>)
 80028cc:	6013      	str	r3, [r2, #0]
			sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER1_START_ADDRS + stringHead);
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <LTDC_draw_filled_rectangle+0x11c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e018      	b.n	800290c <LTDC_draw_filled_rectangle+0x94>
		}
		else
		{
			layerWidth = LTDC_LAYER2_WIDTH;
 80028da:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80028de:	617b      	str	r3, [r7, #20]
			stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 80028e0:	88bb      	ldrh	r3, [r7, #4]
 80028e2:	7afa      	ldrb	r2, [r7, #11]
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	fb01 f202 	mul.w	r2, r1, r2
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	3201      	adds	r2, #1
 80028f2:	7af9      	ldrb	r1, [r7, #11]
 80028f4:	fb01 f202 	mul.w	r2, r1, r2
 80028f8:	4413      	add	r3, r2
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <LTDC_draw_filled_rectangle+0x11c>)
 80028fc:	6013      	str	r3, [r2, #0]
			sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER2_START_ADDRS + stringHead);
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <LTDC_draw_filled_rectangle+0x11c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8002906:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800290a:	613b      	str	r3, [r7, #16]
		}


	for(j=0; j< ((y1 - y0)); j++)
 800290c:	2300      	movs	r3, #0
 800290e:	81bb      	strh	r3, [r7, #12]
 8002910:	e033      	b.n	800297a <LTDC_draw_filled_rectangle+0x102>
	{
		for(i=0; i< ((x1 - x0)); i++)
 8002912:	2300      	movs	r3, #0
 8002914:	81fb      	strh	r3, [r7, #14]
 8002916:	e027      	b.n	8002968 <LTDC_draw_filled_rectangle+0xf0>
		{
			*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * j )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	89ba      	ldrh	r2, [r7, #12]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	89fa      	ldrh	r2, [r7, #14]
 8002928:	7af9      	ldrb	r1, [r7, #11]
 800292a:	fb01 f202 	mul.w	r2, r1, r2
 800292e:	4413      	add	r3, r2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]
			*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * j )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 800293a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b298      	uxth	r0, r3
 8002940:	7afb      	ldrb	r3, [r7, #11]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	89ba      	ldrh	r2, [r7, #12]
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	89fa      	ldrh	r2, [r7, #14]
 8002950:	7af9      	ldrb	r1, [r7, #11]
 8002952:	fb01 f202 	mul.w	r2, r1, r2
 8002956:	4413      	add	r3, r2
 8002958:	3301      	adds	r3, #1
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	b2c2      	uxtb	r2, r0
 8002960:	701a      	strb	r2, [r3, #0]
		for(i=0; i< ((x1 - x0)); i++)
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	3301      	adds	r3, #1
 8002966:	81fb      	strh	r3, [r7, #14]
 8002968:	89fa      	ldrh	r2, [r7, #14]
 800296a:	8879      	ldrh	r1, [r7, #2]
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	1acb      	subs	r3, r1, r3
 8002970:	429a      	cmp	r2, r3
 8002972:	dbd1      	blt.n	8002918 <LTDC_draw_filled_rectangle+0xa0>
	for(j=0; j< ((y1 - y0)); j++)
 8002974:	89bb      	ldrh	r3, [r7, #12]
 8002976:	3301      	adds	r3, #1
 8002978:	81bb      	strh	r3, [r7, #12]
 800297a:	89ba      	ldrh	r2, [r7, #12]
 800297c:	8839      	ldrh	r1, [r7, #0]
 800297e:	88bb      	ldrh	r3, [r7, #4]
 8002980:	1acb      	subs	r3, r1, r3
 8002982:	429a      	cmp	r2, r3
 8002984:	dbc5      	blt.n	8002912 <LTDC_draw_filled_rectangle+0x9a>
		}

    }


}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bc90      	pop	{r4, r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000015c 	.word	0x2000015c

08002998 <LTDC_put_string>:




void LTDC_put_string(uint16_t x0, uint16_t y0, uint8_t *strPtr, uint8_t layer,  uint16_t colour)
{
 8002998:	b480      	push	{r7}
 800299a:	b08f      	sub	sp, #60	; 0x3c
 800299c:	af00      	add	r7, sp, #0
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	81fb      	strh	r3, [r7, #14]
 80029a6:	460b      	mov	r3, r1
 80029a8:	81bb      	strh	r3, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]


	//uint32_t stringHead =0;
	uint8_t row = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t col = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t i = 0, fontByte = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	__IO uint8_t *sdRamPtr = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t fontBitmaptIndex = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t charWidth = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t charHeight = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t temp = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8 startChar = '!';
 80029e0:	2321      	movs	r3, #33	; 0x21
 80029e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t pixelWidth = 2;
 80029e6:	2302      	movs	r3, #2
 80029e8:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t charSpace = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
	uint32_t layerWidth = 0; 
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28


	uint16_t *fontDescrptPtr  =  ( uint16_t * )globalFontSelector.fontDescrptPtr;
 80029f4:	4ba2      	ldr	r3, [pc, #648]	; (8002c80 <LTDC_put_string+0x2e8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
	uint8_t *fontBitMap       =  ( uint8_t * )globalFontSelector.fontBitMap;
 80029fa:	4ba1      	ldr	r3, [pc, #644]	; (8002c80 <LTDC_put_string+0x2e8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	617b      	str	r3, [r7, #20]
	charHeight = globalFontSelector.fontHeight;
 8002a00:	4b9f      	ldr	r3, [pc, #636]	; (8002c80 <LTDC_put_string+0x2e8>)
 8002a02:	7a1b      	ldrb	r3, [r3, #8]
 8002a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	charSpace = globalFontSelector.interCharSpace;
 8002a08:	4b9d      	ldr	r3, [pc, #628]	; (8002c80 <LTDC_put_string+0x2e8>)
 8002a0a:	7a5b      	ldrb	r3, [r3, #9]
 8002a0c:	77fb      	strb	r3, [r7, #31]

	if( layer == LTDC_CAPA_UNO)
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11a      	bne.n	8002a4a <LTDC_put_string+0xb2>
	{
		layerWidth = LTDC_LAYER1_WIDTH;
 8002a14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
		stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 8002a1a:	89bb      	ldrh	r3, [r7, #12]
 8002a1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a22:	fb01 f202 	mul.w	r2, r1, r2
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	89fa      	ldrh	r2, [r7, #14]
 8002a2c:	3201      	adds	r2, #1
 8002a2e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002a32:	fb01 f202 	mul.w	r2, r1, r2
 8002a36:	4413      	add	r3, r2
 8002a38:	4a92      	ldr	r2, [pc, #584]	; (8002c84 <LTDC_put_string+0x2ec>)
 8002a3a:	6013      	str	r3, [r2, #0]
		sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER1_START_ADDRS + stringHead);
 8002a3c:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <LTDC_put_string+0x2ec>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
 8002a46:	f001 bf89 	b.w	800495c <LTDC_put_string+0x1fc4>
	}
	else
	{
		layerWidth = LTDC_LAYER2_WIDTH;
 8002a4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
		stringHead = ( ( y0 ) * (layerWidth * pixelWidth) )+ ( ( x0 + 1 ) * pixelWidth );
 8002a50:	89bb      	ldrh	r3, [r7, #12]
 8002a52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a58:	fb01 f202 	mul.w	r2, r1, r2
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	89fa      	ldrh	r2, [r7, #14]
 8002a62:	3201      	adds	r2, #1
 8002a64:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002a68:	fb01 f202 	mul.w	r2, r1, r2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a85      	ldr	r2, [pc, #532]	; (8002c84 <LTDC_put_string+0x2ec>)
 8002a70:	6013      	str	r3, [r2, #0]
		sdRamPtr = (__IO uint8_t *) ( LTDC_LAYER2_START_ADDRS + stringHead);
 8002a72:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <LTDC_put_string+0x2ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8002a7a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
	}

	while(*strPtr != 0x00)
 8002a80:	f001 bf6c 	b.w	800495c <LTDC_put_string+0x1fc4>
	{
		if( *strPtr != ' ')
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d007      	beq.n	8002a9c <LTDC_put_string+0x104>
		{
			temp = (uint8_t)(*strPtr)-startChar;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002a9a:	e002      	b.n	8002aa2 <LTDC_put_string+0x10a>
		}
		else
		{
			temp = (uint8_t)94U;
 8002a9c:	235e      	movs	r3, #94	; 0x5e
 8002a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		temp = temp *2;
 8002aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		fontBitmaptIndex = (uint16_t) *(  fontDescrptPtr + temp + 1   );
 8002aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	84bb      	strh	r3, [r7, #36]	; 0x24
		charWidth =( uint8_t )*(  fontDescrptPtr  + temp  );
 8002abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if( (charWidth > 0) && (charWidth <= 8 ) )
 8002acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d062      	beq.n	8002b9a <LTDC_put_string+0x202>
 8002ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d85e      	bhi.n	8002b9a <LTDC_put_string+0x202>
		{
			for(i=0; i<8; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002ae2:	e056      	b.n	8002b92 <LTDC_put_string+0x1fa>
			{
				for(row = 0; row < charHeight; row++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002aea:	e047      	b.n	8002b7c <LTDC_put_string+0x1e4>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row) ) );
 8002aec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002b00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002b04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	fa41 f303 	asr.w	r3, r1, r3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02e      	beq.n	8002b72 <LTDC_put_string+0x1da>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002b14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002b2a:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002b2e:	fb01 f202 	mul.w	r2, r1, r2
 8002b32:	4413      	add	r3, r2
 8002b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b36:	4413      	add	r3, r2
 8002b38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 8002b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	b298      	uxth	r0, r3
 8002b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002b5e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002b62:	fb01 f202 	mul.w	r2, r1, r2
 8002b66:	4413      	add	r3, r2
 8002b68:	3301      	adds	r3, #1
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2c2      	uxtb	r2, r0
 8002b70:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b76:	3301      	adds	r3, #1
 8002b78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002b7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002b80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d3b1      	bcc.n	8002aec <LTDC_put_string+0x154>
			for(i=0; i<8; i++)
 8002b88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002b92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d9a4      	bls.n	8002ae4 <LTDC_put_string+0x14c>
				}
			}
			//  sdRamPtr = sdRamPtr + (charWidth * pixelWidth ) ;
		}
		//*******************************************************************************************************************************************************
		if( (charWidth > 8) && (charWidth <= 16 ) )
 8002b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	f240 80d5 	bls.w	8002d4e <LTDC_put_string+0x3b6>
 8002ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	f200 80d0 	bhi.w	8002d4e <LTDC_put_string+0x3b6>
		{
			for(i=0; i<8; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002bb4:	e057      	b.n	8002c66 <LTDC_put_string+0x2ce>
			{
				for(row = 0; row < charHeight; row++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bbc:	e048      	b.n	8002c50 <LTDC_put_string+0x2b8>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*2) ) );
 8002bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002bd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002bd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	fa41 f303 	asr.w	r3, r1, r3
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02e      	beq.n	8002c46 <LTDC_put_string+0x2ae>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002bfe:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002c02:	fb01 f202 	mul.w	r2, r1, r2
 8002c06:	4413      	add	r3, r2
 8002c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 8002c14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b298      	uxth	r0, r3
 8002c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002c32:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002c36:	fb01 f202 	mul.w	r2, r1, r2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c40:	4413      	add	r3, r2
 8002c42:	b2c2      	uxtb	r2, r0
 8002c44:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002c46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002c54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3b0      	bcc.n	8002bbe <LTDC_put_string+0x226>
			for(i=0; i<8; i++)
 8002c5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c60:	3301      	adds	r3, #1
 8002c62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002c66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002c6a:	2b07      	cmp	r3, #7
 8002c6c:	d9a3      	bls.n	8002bb6 <LTDC_put_string+0x21e>
					}
				}
			}
			//  sdRamPtr = sdRamPtr + 8;
			for(i=0; i< ( charWidth-8 ); i++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002c74:	e064      	b.n	8002d40 <LTDC_put_string+0x3a8>
			{
				for(row = 0; row < charHeight; row++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002c7c:	e055      	b.n	8002d2a <LTDC_put_string+0x392>
 8002c7e:	bf00      	nop
 8002c80:	20000040 	.word	0x20000040
 8002c84:	2000015c 	.word	0x2000015c
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*2)+1 ) );
 8002c88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	3301      	adds	r3, #1
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002c9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002ca2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	fa41 f303 	asr.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d036      	beq.n	8002d20 <LTDC_put_string+0x388>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8002cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cc8:	00d2      	lsls	r2, r2, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002cd0:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002cd4:	fb01 f202 	mul.w	r2, r1, r2
 8002cd8:	4413      	add	r3, r2
 8002cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cdc:	4413      	add	r3, r2
 8002cde:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8002ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	b298      	uxth	r0, r3
 8002cee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d04:	00d2      	lsls	r2, r2, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002d0c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002d10:	fb01 f202 	mul.w	r2, r1, r2
 8002d14:	4413      	add	r3, r2
 8002d16:	3301      	adds	r3, #1
 8002d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b2c2      	uxtb	r2, r0
 8002d1e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d24:	3301      	adds	r3, #1
 8002d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002d2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3a8      	bcc.n	8002c88 <LTDC_put_string+0x2f0>
			for(i=0; i< ( charWidth-8 ); i++)
 8002d36:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002d40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d48:	3b08      	subs	r3, #8
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	db93      	blt.n	8002c76 <LTDC_put_string+0x2de>
					}
				}
			}
		}
		//*******************************************************************************************************************************************************
		if( (charWidth > 18) && (charWidth <= 24 ) )
 8002d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	f240 813e 	bls.w	8002fd4 <LTDC_put_string+0x63c>
 8002d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d5c:	2b18      	cmp	r3, #24
 8002d5e:	f200 8139 	bhi.w	8002fd4 <LTDC_put_string+0x63c>
		{
			for(i=0; i<8; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002d68:	e059      	b.n	8002e1e <LTDC_put_string+0x486>
			{
				for(row = 0; row < charHeight; row++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d70:	e04a      	b.n	8002e08 <LTDC_put_string+0x470>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*3) ) );
 8002d72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002d74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	461a      	mov	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002d8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002d90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	fa41 f303 	asr.w	r3, r1, r3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d02e      	beq.n	8002dfe <LTDC_put_string+0x466>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 8002da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002db6:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002dba:	fb01 f202 	mul.w	r2, r1, r2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 8002dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b298      	uxth	r0, r3
 8002dd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002dea:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002dee:	fb01 f202 	mul.w	r2, r1, r2
 8002df2:	4413      	add	r3, r2
 8002df4:	3301      	adds	r3, #1
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	4413      	add	r3, r2
 8002dfa:	b2c2      	uxtb	r2, r0
 8002dfc:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e02:	3301      	adds	r3, #1
 8002e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002e0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3ae      	bcc.n	8002d72 <LTDC_put_string+0x3da>
			for(i=0; i<8; i++)
 8002e14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002e1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d9a1      	bls.n	8002d6a <LTDC_put_string+0x3d2>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002e2c:	e061      	b.n	8002ef2 <LTDC_put_string+0x55a>
			{
				for(row = 0; row < charHeight; row++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e34:	e052      	b.n	8002edc <LTDC_put_string+0x544>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*3)+1 ) );
 8002e36:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002e38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	3301      	adds	r3, #1
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4413      	add	r3, r2
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002e50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002e54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	fa41 f303 	asr.w	r3, r1, r3
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d036      	beq.n	8002ed2 <LTDC_put_string+0x53a>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8002e64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e7a:	00d2      	lsls	r2, r2, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002e82:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002e86:	fb01 f202 	mul.w	r2, r1, r2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8e:	4413      	add	r3, r2
 8002e90:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8002e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b298      	uxth	r0, r3
 8002ea0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eb6:	00d2      	lsls	r2, r2, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002ebe:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002ec2:	fb01 f202 	mul.w	r2, r1, r2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3301      	adds	r3, #1
 8002eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2c2      	uxtb	r2, r0
 8002ed0:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002edc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002ee0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3a6      	bcc.n	8002e36 <LTDC_put_string+0x49e>
			for(i=0; i< 8 ; i++)
 8002ee8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002eec:	3301      	adds	r3, #1
 8002eee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002ef2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002ef6:	2b07      	cmp	r3, #7
 8002ef8:	d999      	bls.n	8002e2e <LTDC_put_string+0x496>
					}
				}
			}
			for(i=0; i< ( charWidth-16 ); i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002f00:	e061      	b.n	8002fc6 <LTDC_put_string+0x62e>
			{
				for(row = 0; row < charHeight; row++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f08:	e052      	b.n	8002fb0 <LTDC_put_string+0x618>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*3)+2 ) );
 8002f0a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002f0c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	3302      	adds	r3, #2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8002f24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002f28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	fa41 f303 	asr.w	r3, r1, r3
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d036      	beq.n	8002fa6 <LTDC_put_string+0x60e>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8002f38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	4413      	add	r3, r2
 8002f52:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002f56:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002f5a:	fb01 f202 	mul.w	r2, r1, r2
 8002f5e:	4413      	add	r3, r2
 8002f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f62:	4413      	add	r3, r2
 8002f64:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8002f6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	b298      	uxth	r0, r3
 8002f74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002f92:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002f96:	fb01 f202 	mul.w	r2, r1, r2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b2c2      	uxtb	r2, r0
 8002fa4:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8002fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002faa:	3301      	adds	r3, #1
 8002fac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002fb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002fb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d3a6      	bcc.n	8002f0a <LTDC_put_string+0x572>
			for(i=0; i< ( charWidth-16 ); i++)
 8002fbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002fc6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fce:	3b10      	subs	r3, #16
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	db96      	blt.n	8002f02 <LTDC_put_string+0x56a>
				}
			}
		}
		//*******************************************************************************************************************************************************

		if( (charWidth > 24) && (charWidth <= 32 ) )
 8002fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fd8:	2b18      	cmp	r3, #24
 8002fda:	f240 81a6 	bls.w	800332a <LTDC_put_string+0x992>
 8002fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f200 81a1 	bhi.w	800332a <LTDC_put_string+0x992>
		{
			for(i=0; i<8; i++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002fee:	e057      	b.n	80030a0 <LTDC_put_string+0x708>
			{
				for(row = 0; row < charHeight; row++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ff6:	e048      	b.n	800308a <LTDC_put_string+0x6f2>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*4) ) );
 8002ff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	461a      	mov	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800300e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003012:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	fa41 f303 	asr.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <LTDC_put_string+0x6e8>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 8003022:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003038:	f897 1020 	ldrb.w	r1, [r7, #32]
 800303c:	fb01 f202 	mul.w	r2, r1, r2
 8003040:	4413      	add	r3, r2
 8003042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003044:	4413      	add	r3, r2
 8003046:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 800304e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	b298      	uxth	r0, r3
 8003056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305c:	fb02 f303 	mul.w	r3, r2, r3
 8003060:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800306c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003070:	fb01 f202 	mul.w	r2, r1, r2
 8003074:	4413      	add	r3, r2
 8003076:	3301      	adds	r3, #1
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	4413      	add	r3, r2
 800307c:	b2c2      	uxtb	r2, r0
 800307e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003084:	3301      	adds	r3, #1
 8003086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800308a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800308e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003092:	429a      	cmp	r2, r3
 8003094:	d3b0      	bcc.n	8002ff8 <LTDC_put_string+0x660>
			for(i=0; i<8; i++)
 8003096:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800309a:	3301      	adds	r3, #1
 800309c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80030a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d9a3      	bls.n	8002ff0 <LTDC_put_string+0x658>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80030ae:	e05f      	b.n	8003170 <LTDC_put_string+0x7d8>
			{
				for(row = 0; row < charHeight; row++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80030b6:	e050      	b.n	800315a <LTDC_put_string+0x7c2>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*4)+1 ) );
 80030b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3301      	adds	r3, #1
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4413      	add	r3, r2
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80030ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	fa41 f303 	asr.w	r3, r1, r3
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d036      	beq.n	8003150 <LTDC_put_string+0x7b8>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80030e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80030f0:	fb02 f303 	mul.w	r3, r2, r3
 80030f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003100:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003104:	fb01 f202 	mul.w	r2, r1, r2
 8003108:	4413      	add	r3, r2
 800310a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310c:	4413      	add	r3, r2
 800310e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003116:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	b298      	uxth	r0, r3
 800311e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003134:	00d2      	lsls	r2, r2, #3
 8003136:	4413      	add	r3, r2
 8003138:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800313c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003140:	fb01 f202 	mul.w	r2, r1, r2
 8003144:	4413      	add	r3, r2
 8003146:	3301      	adds	r3, #1
 8003148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314a:	4413      	add	r3, r2
 800314c:	b2c2      	uxtb	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003154:	3301      	adds	r3, #1
 8003156:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800315a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800315e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003162:	429a      	cmp	r2, r3
 8003164:	d3a8      	bcc.n	80030b8 <LTDC_put_string+0x720>
			for(i=0; i< 8 ; i++)
 8003166:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800316a:	3301      	adds	r3, #1
 800316c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003170:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003174:	2b07      	cmp	r3, #7
 8003176:	d99b      	bls.n	80030b0 <LTDC_put_string+0x718>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800317e:	e05f      	b.n	8003240 <LTDC_put_string+0x8a8>
			{
				for(row = 0; row < charHeight; row++)
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003186:	e050      	b.n	800322a <LTDC_put_string+0x892>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*4)+2 ) );
 8003188:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800318a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	3302      	adds	r3, #2
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800319e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80031a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	fa41 f303 	asr.w	r3, r1, r3
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <LTDC_put_string+0x888>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80031b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	4413      	add	r3, r2
 80031cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80031d0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80031d4:	fb01 f202 	mul.w	r2, r1, r2
 80031d8:	4413      	add	r3, r2
 80031da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031dc:	4413      	add	r3, r2
 80031de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80031e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	b298      	uxth	r0, r3
 80031ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	4413      	add	r3, r2
 8003208:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800320c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003210:	fb01 f202 	mul.w	r2, r1, r2
 8003214:	4413      	add	r3, r2
 8003216:	3301      	adds	r3, #1
 8003218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321a:	4413      	add	r3, r2
 800321c:	b2c2      	uxtb	r2, r0
 800321e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003224:	3301      	adds	r3, #1
 8003226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800322a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800322e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003232:	429a      	cmp	r2, r3
 8003234:	d3a8      	bcc.n	8003188 <LTDC_put_string+0x7f0>
			for(i=0; i< 8 ; i++)
 8003236:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800323a:	3301      	adds	r3, #1
 800323c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003240:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003244:	2b07      	cmp	r3, #7
 8003246:	d99b      	bls.n	8003180 <LTDC_put_string+0x7e8>
					}
				}
			}
			for(i=0; i< ( charWidth-24 ); i++)
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800324e:	e065      	b.n	800331c <LTDC_put_string+0x984>
			{
				for(row = 0; row < charHeight; row++)
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003256:	e056      	b.n	8003306 <LTDC_put_string+0x96e>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*4)+3 ) );
 8003258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800325a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3303      	adds	r3, #3
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4413      	add	r3, r2
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800326e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003272:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	fa41 f303 	asr.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d03c      	beq.n	80032fc <LTDC_put_string+0x964>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003290:	fb02 f103 	mul.w	r1, r2, r3
 8003294:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80032a6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80032aa:	fb01 f202 	mul.w	r2, r1, r2
 80032ae:	4413      	add	r3, r2
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	4413      	add	r3, r2
 80032b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80032bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	b298      	uxth	r0, r3
 80032c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80032d2:	fb02 f103 	mul.w	r1, r2, r3
 80032d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80032e8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80032ec:	fb01 f202 	mul.w	r2, r1, r2
 80032f0:	4413      	add	r3, r2
 80032f2:	3301      	adds	r3, #1
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	4413      	add	r3, r2
 80032f8:	b2c2      	uxtb	r2, r0
 80032fa:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80032fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003300:	3301      	adds	r3, #1
 8003302:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003306:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800330a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800330e:	429a      	cmp	r2, r3
 8003310:	d3a2      	bcc.n	8003258 <LTDC_put_string+0x8c0>
			for(i=0; i< ( charWidth-24 ); i++)
 8003312:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003316:	3301      	adds	r3, #1
 8003318:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800331c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003324:	3b18      	subs	r3, #24
 8003326:	429a      	cmp	r2, r3
 8003328:	db92      	blt.n	8003250 <LTDC_put_string+0x8b8>
				}
			}
		}

		//*******************************************************************************************************************************************************
		if( (charWidth > 32) && (charWidth <= 40 ) )
 800332a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800332e:	2b20      	cmp	r3, #32
 8003330:	f240 8218 	bls.w	8003764 <LTDC_put_string+0xdcc>
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003338:	2b28      	cmp	r3, #40	; 0x28
 800333a:	f200 8213 	bhi.w	8003764 <LTDC_put_string+0xdcc>
		{
			for(i=0; i<8; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003344:	e059      	b.n	80033fa <LTDC_put_string+0xa62>
			{
				for(row = 0; row < charHeight; row++)
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800334c:	e04a      	b.n	80033e4 <LTDC_put_string+0xa4c>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*5) ) );
 800334e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003350:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	440b      	add	r3, r1
 800335c:	461a      	mov	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	4413      	add	r3, r2
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003368:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800336c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	fa41 f303 	asr.w	r3, r1, r3
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02e      	beq.n	80033da <LTDC_put_string+0xa42>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 800337c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003392:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003396:	fb01 f202 	mul.w	r2, r1, r2
 800339a:	4413      	add	r3, r2
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	4413      	add	r3, r2
 80033a0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 80033a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	b298      	uxth	r0, r3
 80033b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80033c6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80033ca:	fb01 f202 	mul.w	r2, r1, r2
 80033ce:	4413      	add	r3, r2
 80033d0:	3301      	adds	r3, #1
 80033d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d4:	4413      	add	r3, r2
 80033d6:	b2c2      	uxtb	r2, r0
 80033d8:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80033da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033de:	3301      	adds	r3, #1
 80033e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80033e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80033e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3ae      	bcc.n	800334e <LTDC_put_string+0x9b6>
			for(i=0; i<8; i++)
 80033f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80033f4:	3301      	adds	r3, #1
 80033f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80033fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80033fe:	2b07      	cmp	r3, #7
 8003400:	d9a1      	bls.n	8003346 <LTDC_put_string+0x9ae>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003402:	2300      	movs	r3, #0
 8003404:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003408:	e061      	b.n	80034ce <LTDC_put_string+0xb36>
			{
				for(row = 0; row < charHeight; row++)
 800340a:	2300      	movs	r3, #0
 800340c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003410:	e052      	b.n	80034b8 <LTDC_put_string+0xb20>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*5)+1 ) );
 8003412:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003414:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	440b      	add	r3, r1
 8003420:	3301      	adds	r3, #1
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4413      	add	r3, r2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800342c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003430:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	fa41 f303 	asr.w	r3, r1, r3
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d036      	beq.n	80034ae <LTDC_put_string+0xb16>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003456:	00d2      	lsls	r2, r2, #3
 8003458:	4413      	add	r3, r2
 800345a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800345e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003462:	fb01 f202 	mul.w	r2, r1, r2
 8003466:	4413      	add	r3, r2
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346a:	4413      	add	r3, r2
 800346c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	b298      	uxth	r0, r3
 800347c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003492:	00d2      	lsls	r2, r2, #3
 8003494:	4413      	add	r3, r2
 8003496:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800349a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800349e:	fb01 f202 	mul.w	r2, r1, r2
 80034a2:	4413      	add	r3, r2
 80034a4:	3301      	adds	r3, #1
 80034a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a8:	4413      	add	r3, r2
 80034aa:	b2c2      	uxtb	r2, r0
 80034ac:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80034ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034b2:	3301      	adds	r3, #1
 80034b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80034bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3a6      	bcc.n	8003412 <LTDC_put_string+0xa7a>
			for(i=0; i< 8 ; i++)
 80034c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80034c8:	3301      	adds	r3, #1
 80034ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80034ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80034d2:	2b07      	cmp	r3, #7
 80034d4:	d999      	bls.n	800340a <LTDC_put_string+0xa72>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80034dc:	e061      	b.n	80035a2 <LTDC_put_string+0xc0a>
			{
				for(row = 0; row < charHeight; row++)
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034e4:	e052      	b.n	800358c <LTDC_put_string+0xbf4>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*5)+2 ) );
 80034e6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80034e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	3302      	adds	r3, #2
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003500:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003504:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	fa41 f303 	asr.w	r3, r1, r3
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d036      	beq.n	8003582 <LTDC_put_string+0xbea>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003514:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	f897 2020 	ldrb.w	r2, [r7, #32]
 800352a:	0112      	lsls	r2, r2, #4
 800352c:	4413      	add	r3, r2
 800352e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003532:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003536:	fb01 f202 	mul.w	r2, r1, r2
 800353a:	4413      	add	r3, r2
 800353c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353e:	4413      	add	r3, r2
 8003540:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003548:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	b298      	uxth	r0, r3
 8003550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	4413      	add	r3, r2
 800356a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800356e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003572:	fb01 f202 	mul.w	r2, r1, r2
 8003576:	4413      	add	r3, r2
 8003578:	3301      	adds	r3, #1
 800357a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357c:	4413      	add	r3, r2
 800357e:	b2c2      	uxtb	r2, r0
 8003580:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003586:	3301      	adds	r3, #1
 8003588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800358c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003590:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003594:	429a      	cmp	r2, r3
 8003596:	d3a6      	bcc.n	80034e6 <LTDC_put_string+0xb4e>
			for(i=0; i< 8 ; i++)
 8003598:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800359c:	3301      	adds	r3, #1
 800359e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80035a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	d999      	bls.n	80034de <LTDC_put_string+0xb46>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80035b0:	e067      	b.n	8003682 <LTDC_put_string+0xcea>
			{
				for(row = 0; row < charHeight; row++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80035b8:	e058      	b.n	800366c <LTDC_put_string+0xcd4>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*5)+3 ) );
 80035ba:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80035bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	3303      	adds	r3, #3
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80035d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80035d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	fa41 f303 	asr.w	r3, r1, r3
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03c      	beq.n	8003662 <LTDC_put_string+0xcca>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80035e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80035f6:	fb02 f103 	mul.w	r1, r2, r3
 80035fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800360c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003610:	fb01 f202 	mul.w	r2, r1, r2
 8003614:	4413      	add	r3, r2
 8003616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003618:	4413      	add	r3, r2
 800361a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	b298      	uxth	r0, r3
 800362a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800362e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003638:	fb02 f103 	mul.w	r1, r2, r3
 800363c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800364e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003652:	fb01 f202 	mul.w	r2, r1, r2
 8003656:	4413      	add	r3, r2
 8003658:	3301      	adds	r3, #1
 800365a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365c:	4413      	add	r3, r2
 800365e:	b2c2      	uxtb	r2, r0
 8003660:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003662:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003666:	3301      	adds	r3, #1
 8003668:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800366c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003670:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003674:	429a      	cmp	r2, r3
 8003676:	d3a0      	bcc.n	80035ba <LTDC_put_string+0xc22>
			for(i=0; i< 8 ; i++)
 8003678:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800367c:	3301      	adds	r3, #1
 800367e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003682:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003686:	2b07      	cmp	r3, #7
 8003688:	d993      	bls.n	80035b2 <LTDC_put_string+0xc1a>
					}
				}
			}
			for(i=0; i< ( charWidth-32 ); i++)
 800368a:	2300      	movs	r3, #0
 800368c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003690:	e061      	b.n	8003756 <LTDC_put_string+0xdbe>
			{
				for(row = 0; row < charHeight; row++)
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003698:	e052      	b.n	8003740 <LTDC_put_string+0xda8>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*5)+4 ) );
 800369a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800369c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	3304      	adds	r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4413      	add	r3, r2
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80036b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80036b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	fa41 f303 	asr.w	r3, r1, r3
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d036      	beq.n	8003736 <LTDC_put_string+0xd9e>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80036c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036de:	0152      	lsls	r2, r2, #5
 80036e0:	4413      	add	r3, r2
 80036e2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80036e6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80036ea:	fb01 f202 	mul.w	r2, r1, r2
 80036ee:	4413      	add	r3, r2
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	4413      	add	r3, r2
 80036f4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80036fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	b298      	uxth	r0, r3
 8003704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	f897 2020 	ldrb.w	r2, [r7, #32]
 800371a:	0152      	lsls	r2, r2, #5
 800371c:	4413      	add	r3, r2
 800371e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003722:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003726:	fb01 f202 	mul.w	r2, r1, r2
 800372a:	4413      	add	r3, r2
 800372c:	3301      	adds	r3, #1
 800372e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003730:	4413      	add	r3, r2
 8003732:	b2c2      	uxtb	r2, r0
 8003734:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800373a:	3301      	adds	r3, #1
 800373c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003740:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003748:	429a      	cmp	r2, r3
 800374a:	d3a6      	bcc.n	800369a <LTDC_put_string+0xd02>
			for(i=0; i< ( charWidth-32 ); i++)
 800374c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003750:	3301      	adds	r3, #1
 8003752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003756:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800375a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800375e:	3b20      	subs	r3, #32
 8003760:	429a      	cmp	r2, r3
 8003762:	db96      	blt.n	8003692 <LTDC_put_string+0xcfa>
				}
			}
		}

		//*******************************************************************************************************************************************************
		if( (charWidth > 40) && (charWidth <= 48 ) )
 8003764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003768:	2b28      	cmp	r3, #40	; 0x28
 800376a:	f240 828e 	bls.w	8003c8a <LTDC_put_string+0x12f2>
 800376e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003772:	2b30      	cmp	r3, #48	; 0x30
 8003774:	f200 8289 	bhi.w	8003c8a <LTDC_put_string+0x12f2>
		{
			for(i=0; i<8; i++)
 8003778:	2300      	movs	r3, #0
 800377a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800377e:	e05a      	b.n	8003836 <LTDC_put_string+0xe9e>
			{
				for(row = 0; row < charHeight; row++)
 8003780:	2300      	movs	r3, #0
 8003782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003786:	e04b      	b.n	8003820 <LTDC_put_string+0xe88>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6) ) );
 8003788:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800378a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	440b      	add	r3, r1
 8003798:	461a      	mov	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80037a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80037a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	fa41 f303 	asr.w	r3, r1, r3
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d02e      	beq.n	8003816 <LTDC_put_string+0xe7e>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 80037b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80037ce:	f897 1020 	ldrb.w	r1, [r7, #32]
 80037d2:	fb01 f202 	mul.w	r2, r1, r2
 80037d6:	4413      	add	r3, r2
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	4413      	add	r3, r2
 80037dc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 80037e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	b298      	uxth	r0, r3
 80037ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003802:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003806:	fb01 f202 	mul.w	r2, r1, r2
 800380a:	4413      	add	r3, r2
 800380c:	3301      	adds	r3, #1
 800380e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003810:	4413      	add	r3, r2
 8003812:	b2c2      	uxtb	r2, r0
 8003814:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800381a:	3301      	adds	r3, #1
 800381c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003820:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003828:	429a      	cmp	r2, r3
 800382a:	d3ad      	bcc.n	8003788 <LTDC_put_string+0xdf0>
			for(i=0; i<8; i++)
 800382c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003830:	3301      	adds	r3, #1
 8003832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003836:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800383a:	2b07      	cmp	r3, #7
 800383c:	d9a0      	bls.n	8003780 <LTDC_put_string+0xde8>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 800383e:	2300      	movs	r3, #0
 8003840:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003844:	e062      	b.n	800390c <LTDC_put_string+0xf74>
			{
				for(row = 0; row < charHeight; row++)
 8003846:	2300      	movs	r3, #0
 8003848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800384c:	e053      	b.n	80038f6 <LTDC_put_string+0xf5e>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6)+1 ) );
 800384e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003850:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	440b      	add	r3, r1
 800385e:	3301      	adds	r3, #1
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800386a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800386e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	fa41 f303 	asr.w	r3, r1, r3
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d036      	beq.n	80038ec <LTDC_put_string+0xf54>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 800387e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003894:	00d2      	lsls	r2, r2, #3
 8003896:	4413      	add	r3, r2
 8003898:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800389c:	f897 1020 	ldrb.w	r1, [r7, #32]
 80038a0:	fb01 f202 	mul.w	r2, r1, r2
 80038a4:	4413      	add	r3, r2
 80038a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038a8:	4413      	add	r3, r2
 80038aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80038b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	b298      	uxth	r0, r3
 80038ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80038be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c0:	fb02 f303 	mul.w	r3, r2, r3
 80038c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80038d0:	00d2      	lsls	r2, r2, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80038d8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80038dc:	fb01 f202 	mul.w	r2, r1, r2
 80038e0:	4413      	add	r3, r2
 80038e2:	3301      	adds	r3, #1
 80038e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e6:	4413      	add	r3, r2
 80038e8:	b2c2      	uxtb	r2, r0
 80038ea:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80038ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80038f0:	3301      	adds	r3, #1
 80038f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80038f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80038fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3a5      	bcc.n	800384e <LTDC_put_string+0xeb6>
			for(i=0; i< 8 ; i++)
 8003902:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003906:	3301      	adds	r3, #1
 8003908:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800390c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003910:	2b07      	cmp	r3, #7
 8003912:	d998      	bls.n	8003846 <LTDC_put_string+0xeae>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003914:	2300      	movs	r3, #0
 8003916:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800391a:	e062      	b.n	80039e2 <LTDC_put_string+0x104a>
			{
				for(row = 0; row < charHeight; row++)
 800391c:	2300      	movs	r3, #0
 800391e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003922:	e053      	b.n	80039cc <LTDC_put_string+0x1034>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6)+2 ) );
 8003924:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003926:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	440b      	add	r3, r1
 8003934:	3302      	adds	r3, #2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003940:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003944:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	fa41 f303 	asr.w	r3, r1, r3
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d036      	beq.n	80039c2 <LTDC_put_string+0x102a>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003954:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	f897 2020 	ldrb.w	r2, [r7, #32]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	4413      	add	r3, r2
 800396e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003972:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003976:	fb01 f202 	mul.w	r2, r1, r2
 800397a:	4413      	add	r3, r2
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	4413      	add	r3, r2
 8003980:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	b298      	uxth	r0, r3
 8003990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80039ae:	f897 1020 	ldrb.w	r1, [r7, #32]
 80039b2:	fb01 f202 	mul.w	r2, r1, r2
 80039b6:	4413      	add	r3, r2
 80039b8:	3301      	adds	r3, #1
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	4413      	add	r3, r2
 80039be:	b2c2      	uxtb	r2, r0
 80039c0:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80039c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039c6:	3301      	adds	r3, #1
 80039c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80039cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80039d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3a5      	bcc.n	8003924 <LTDC_put_string+0xf8c>
			for(i=0; i< 8 ; i++)
 80039d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80039dc:	3301      	adds	r3, #1
 80039de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80039e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80039e6:	2b07      	cmp	r3, #7
 80039e8:	d998      	bls.n	800391c <LTDC_put_string+0xf84>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80039f0:	e068      	b.n	8003ac4 <LTDC_put_string+0x112c>
			{
				for(row = 0; row < charHeight; row++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80039f8:	e059      	b.n	8003aae <LTDC_put_string+0x1116>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6)+3 ) );
 80039fa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80039fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	3303      	adds	r3, #3
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003a16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	fa41 f303 	asr.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d03c      	beq.n	8003aa4 <LTDC_put_string+0x110c>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003a38:	fb02 f103 	mul.w	r1, r2, r3
 8003a3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003a4e:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003a52:	fb01 f202 	mul.w	r2, r1, r2
 8003a56:	4413      	add	r3, r2
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003a64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b298      	uxth	r0, r3
 8003a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003a7a:	fb02 f103 	mul.w	r1, r2, r3
 8003a7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003a90:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003a94:	fb01 f202 	mul.w	r2, r1, r2
 8003a98:	4413      	add	r3, r2
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9e:	4413      	add	r3, r2
 8003aa0:	b2c2      	uxtb	r2, r0
 8003aa2:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003aae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ab2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d39f      	bcc.n	80039fa <LTDC_put_string+0x1062>
			for(i=0; i< 8 ; i++)
 8003aba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ac4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	d992      	bls.n	80039f2 <LTDC_put_string+0x105a>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ad2:	e062      	b.n	8003b9a <LTDC_put_string+0x1202>
			{
				for(row = 0; row < charHeight; row++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003ada:	e053      	b.n	8003b84 <LTDC_put_string+0x11ec>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6)+4 ) );
 8003adc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003ade:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	3304      	adds	r3, #4
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003af8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	fa41 f303 	asr.w	r3, r1, r3
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d036      	beq.n	8003b7a <LTDC_put_string+0x11e2>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b22:	0152      	lsls	r2, r2, #5
 8003b24:	4413      	add	r3, r2
 8003b26:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003b2a:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003b2e:	fb01 f202 	mul.w	r2, r1, r2
 8003b32:	4413      	add	r3, r2
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	4413      	add	r3, r2
 8003b38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	b298      	uxth	r0, r3
 8003b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b5e:	0152      	lsls	r2, r2, #5
 8003b60:	4413      	add	r3, r2
 8003b62:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003b66:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003b6a:	fb01 f202 	mul.w	r2, r1, r2
 8003b6e:	4413      	add	r3, r2
 8003b70:	3301      	adds	r3, #1
 8003b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b74:	4413      	add	r3, r2
 8003b76:	b2c2      	uxtb	r2, r0
 8003b78:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003b84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3a5      	bcc.n	8003adc <LTDC_put_string+0x1144>
			for(i=0; i< 8 ; i++)
 8003b90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003b94:	3301      	adds	r3, #1
 8003b96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003b9a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003b9e:	2b07      	cmp	r3, #7
 8003ba0:	d998      	bls.n	8003ad4 <LTDC_put_string+0x113c>
					}
				}
			}
			for(i=0; i< ( charWidth-40 ); i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ba8:	e068      	b.n	8003c7c <LTDC_put_string+0x12e4>
			{
				for(row = 0; row < charHeight; row++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003bb0:	e059      	b.n	8003c66 <LTDC_put_string+0x12ce>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*6)+5 ) );
 8003bb2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003bb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3305      	adds	r3, #5
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003bce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003bd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	fa41 f303 	asr.w	r3, r1, r3
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03c      	beq.n	8003c5c <LTDC_put_string+0x12c4>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003bf0:	fb02 f103 	mul.w	r1, r2, r3
 8003bf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003c06:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003c0a:	fb01 f202 	mul.w	r2, r1, r2
 8003c0e:	4413      	add	r3, r2
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	4413      	add	r3, r2
 8003c14:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003c1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	b298      	uxth	r0, r3
 8003c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003c32:	fb02 f103 	mul.w	r1, r2, r3
 8003c36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	440b      	add	r3, r1
 8003c44:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003c48:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003c4c:	fb01 f202 	mul.w	r2, r1, r2
 8003c50:	4413      	add	r3, r2
 8003c52:	3301      	adds	r3, #1
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	4413      	add	r3, r2
 8003c58:	b2c2      	uxtb	r2, r0
 8003c5a:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003c60:	3301      	adds	r3, #1
 8003c62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003c66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003c6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d39f      	bcc.n	8003bb2 <LTDC_put_string+0x121a>
			for(i=0; i< ( charWidth-40 ); i++)
 8003c72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003c76:	3301      	adds	r3, #1
 8003c78:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003c7c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c84:	3b28      	subs	r3, #40	; 0x28
 8003c86:	429a      	cmp	r2, r3
 8003c88:	db8f      	blt.n	8003baa <LTDC_put_string+0x1212>
			}

		}

		//*******************************************************************************************************************************************************
		if( (charWidth > 48) && (charWidth <= 56 ) )
 8003c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8e:	2b30      	cmp	r3, #48	; 0x30
 8003c90:	f240 82f8 	bls.w	8004284 <LTDC_put_string+0x18ec>
 8003c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c98:	2b38      	cmp	r3, #56	; 0x38
 8003c9a:	f200 82f3 	bhi.w	8004284 <LTDC_put_string+0x18ec>
		{
			for(i=0; i<8; i++)
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ca4:	e059      	b.n	8003d5a <LTDC_put_string+0x13c2>
			{
				for(row = 0; row < charHeight; row++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003cac:	e04a      	b.n	8003d44 <LTDC_put_string+0x13ac>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7) ) );
 8003cae:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003cb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	440b      	add	r3, r1
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003cc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ccc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	fa41 f303 	asr.w	r3, r1, r3
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02e      	beq.n	8003d3a <LTDC_put_string+0x13a2>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 8003cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003cf2:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003cf6:	fb01 f202 	mul.w	r2, r1, r2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	4413      	add	r3, r2
 8003d00:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 8003d08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b298      	uxth	r0, r3
 8003d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003d26:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003d2a:	fb01 f202 	mul.w	r2, r1, r2
 8003d2e:	4413      	add	r3, r2
 8003d30:	3301      	adds	r3, #1
 8003d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d34:	4413      	add	r3, r2
 8003d36:	b2c2      	uxtb	r2, r0
 8003d38:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003d44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003d48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d3ae      	bcc.n	8003cae <LTDC_put_string+0x1316>
			for(i=0; i<8; i++)
 8003d50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003d54:	3301      	adds	r3, #1
 8003d56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003d5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003d5e:	2b07      	cmp	r3, #7
 8003d60:	d9a1      	bls.n	8003ca6 <LTDC_put_string+0x130e>
					}

				}
			}
			for(i=0; i< 8 ; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003d68:	e061      	b.n	8003e2e <LTDC_put_string+0x1496>
			{
				for(row = 0; row < charHeight; row++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003d70:	e052      	b.n	8003e18 <LTDC_put_string+0x1480>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+1 ) );
 8003d72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003d74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003d78:	4613      	mov	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3301      	adds	r3, #1
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003d8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003d90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	fa41 f303 	asr.w	r3, r1, r3
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d036      	beq.n	8003e0e <LTDC_put_string+0x1476>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003db6:	00d2      	lsls	r2, r2, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003dbe:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003dc2:	fb01 f202 	mul.w	r2, r1, r2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dca:	4413      	add	r3, r2
 8003dcc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003dd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	b298      	uxth	r0, r3
 8003ddc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003df2:	00d2      	lsls	r2, r2, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003dfa:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003dfe:	fb01 f202 	mul.w	r2, r1, r2
 8003e02:	4413      	add	r3, r2
 8003e04:	3301      	adds	r3, #1
 8003e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e08:	4413      	add	r3, r2
 8003e0a:	b2c2      	uxtb	r2, r0
 8003e0c:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003e12:	3301      	adds	r3, #1
 8003e14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003e18:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3a6      	bcc.n	8003d72 <LTDC_put_string+0x13da>
			for(i=0; i< 8 ; i++)
 8003e24:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003e2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003e32:	2b07      	cmp	r3, #7
 8003e34:	d999      	bls.n	8003d6a <LTDC_put_string+0x13d2>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003e3c:	e061      	b.n	8003f02 <LTDC_put_string+0x156a>
			{
				for(row = 0; row < charHeight; row++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003e44:	e052      	b.n	8003eec <LTDC_put_string+0x1554>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+2 ) );
 8003e46:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003e48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	3302      	adds	r3, #2
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003e60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003e64:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	fa41 f303 	asr.w	r3, r1, r3
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d036      	beq.n	8003ee2 <LTDC_put_string+0x154a>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003e74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e8a:	0112      	lsls	r2, r2, #4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003e92:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003e96:	fb01 f202 	mul.w	r2, r1, r2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003ea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	b298      	uxth	r0, r3
 8003eb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ec6:	0112      	lsls	r2, r2, #4
 8003ec8:	4413      	add	r3, r2
 8003eca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003ece:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003ed2:	fb01 f202 	mul.w	r2, r1, r2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3301      	adds	r3, #1
 8003eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003edc:	4413      	add	r3, r2
 8003ede:	b2c2      	uxtb	r2, r0
 8003ee0:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3a6      	bcc.n	8003e46 <LTDC_put_string+0x14ae>
			for(i=0; i< 8 ; i++)
 8003ef8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003efc:	3301      	adds	r3, #1
 8003efe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003f02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003f06:	2b07      	cmp	r3, #7
 8003f08:	d999      	bls.n	8003e3e <LTDC_put_string+0x14a6>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003f10:	e067      	b.n	8003fe2 <LTDC_put_string+0x164a>
			{
				for(row = 0; row < charHeight; row++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003f18:	e058      	b.n	8003fcc <LTDC_put_string+0x1634>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+3 ) );
 8003f1a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003f1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	440b      	add	r3, r1
 8003f28:	3303      	adds	r3, #3
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8003f34:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003f38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	fa41 f303 	asr.w	r3, r1, r3
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d03c      	beq.n	8003fc2 <LTDC_put_string+0x162a>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8003f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003f56:	fb02 f103 	mul.w	r1, r2, r3
 8003f5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003f6c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003f70:	fb01 f202 	mul.w	r2, r1, r2
 8003f74:	4413      	add	r3, r2
 8003f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8003f82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	b298      	uxth	r0, r3
 8003f8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003f98:	fb02 f103 	mul.w	r1, r2, r3
 8003f9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003fae:	f897 1020 	ldrb.w	r1, [r7, #32]
 8003fb2:	fb01 f202 	mul.w	r2, r1, r2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3301      	adds	r3, #1
 8003fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fbc:	4413      	add	r3, r2
 8003fbe:	b2c2      	uxtb	r2, r0
 8003fc0:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8003fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003fcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003fd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3a0      	bcc.n	8003f1a <LTDC_put_string+0x1582>
			for(i=0; i< 8 ; i++)
 8003fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003fe2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003fe6:	2b07      	cmp	r3, #7
 8003fe8:	d993      	bls.n	8003f12 <LTDC_put_string+0x157a>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ff0:	e061      	b.n	80040b6 <LTDC_put_string+0x171e>
			{
				for(row = 0; row < charHeight; row++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003ff8:	e052      	b.n	80040a0 <LTDC_put_string+0x1708>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+4 ) );
 8003ffa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003ffc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	440b      	add	r3, r1
 8004008:	3304      	adds	r3, #4
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8004014:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004018:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	fa41 f303 	asr.w	r3, r1, r3
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d036      	beq.n	8004096 <LTDC_put_string+0x16fe>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8004028:	f897 3020 	ldrb.w	r3, [r7, #32]
 800402c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800403e:	0152      	lsls	r2, r2, #5
 8004040:	4413      	add	r3, r2
 8004042:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004046:	f897 1020 	ldrb.w	r1, [r7, #32]
 800404a:	fb01 f202 	mul.w	r2, r1, r2
 800404e:	4413      	add	r3, r2
 8004050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004052:	4413      	add	r3, r2
 8004054:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 800405c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	b298      	uxth	r0, r3
 8004064:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	f897 2020 	ldrb.w	r2, [r7, #32]
 800407a:	0152      	lsls	r2, r2, #5
 800407c:	4413      	add	r3, r2
 800407e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004082:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004086:	fb01 f202 	mul.w	r2, r1, r2
 800408a:	4413      	add	r3, r2
 800408c:	3301      	adds	r3, #1
 800408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004090:	4413      	add	r3, r2
 8004092:	b2c2      	uxtb	r2, r0
 8004094:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004096:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800409a:	3301      	adds	r3, #1
 800409c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80040a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80040a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3a6      	bcc.n	8003ffa <LTDC_put_string+0x1662>
			for(i=0; i< 8 ; i++)
 80040ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80040b0:	3301      	adds	r3, #1
 80040b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80040b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80040ba:	2b07      	cmp	r3, #7
 80040bc:	d999      	bls.n	8003ff2 <LTDC_put_string+0x165a>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80040c4:	e067      	b.n	8004196 <LTDC_put_string+0x17fe>
			{
				for(row = 0; row < charHeight; row++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80040cc:	e058      	b.n	8004180 <LTDC_put_string+0x17e8>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+5 ) );
 80040ce:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80040d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	440b      	add	r3, r1
 80040dc:	3305      	adds	r3, #5
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4413      	add	r3, r2
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80040e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80040ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	fa41 f303 	asr.w	r3, r1, r3
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03c      	beq.n	8004176 <LTDC_put_string+0x17de>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80040fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800410a:	fb02 f103 	mul.w	r1, r2, r3
 800410e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004120:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004124:	fb01 f202 	mul.w	r2, r1, r2
 8004128:	4413      	add	r3, r2
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	4413      	add	r3, r2
 800412e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8004136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b298      	uxth	r0, r3
 800413e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800414c:	fb02 f103 	mul.w	r1, r2, r3
 8004150:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	440b      	add	r3, r1
 800415e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004162:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004166:	fb01 f202 	mul.w	r2, r1, r2
 800416a:	4413      	add	r3, r2
 800416c:	3301      	adds	r3, #1
 800416e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004170:	4413      	add	r3, r2
 8004172:	b2c2      	uxtb	r2, r0
 8004174:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800417a:	3301      	adds	r3, #1
 800417c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004180:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004184:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004188:	429a      	cmp	r2, r3
 800418a:	d3a0      	bcc.n	80040ce <LTDC_put_string+0x1736>
			for(i=0; i< 8 ; i++)
 800418c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004190:	3301      	adds	r3, #1
 8004192:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004196:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800419a:	2b07      	cmp	r3, #7
 800419c:	d993      	bls.n	80040c6 <LTDC_put_string+0x172e>
					}
				}
			}
			for(i=0; i< ( charWidth-48 ); i++)
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80041a4:	e067      	b.n	8004276 <LTDC_put_string+0x18de>
			{
				for(row = 0; row < charHeight; row++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80041ac:	e058      	b.n	8004260 <LTDC_put_string+0x18c8>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*7)+6 ) );
 80041ae:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80041b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	440b      	add	r3, r1
 80041bc:	3306      	adds	r3, #6
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80041c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80041cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	fa41 f303 	asr.w	r3, r1, r3
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03c      	beq.n	8004256 <LTDC_put_string+0x18be>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 48*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80041dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80041ea:	fb02 f103 	mul.w	r1, r2, r3
 80041ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	440b      	add	r3, r1
 80041fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004200:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004204:	fb01 f202 	mul.w	r2, r1, r2
 8004208:	4413      	add	r3, r2
 800420a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800420c:	4413      	add	r3, r2
 800420e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 48*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8004216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b298      	uxth	r0, r3
 800421e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800422c:	fb02 f103 	mul.w	r1, r2, r3
 8004230:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	440b      	add	r3, r1
 800423e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004242:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004246:	fb01 f202 	mul.w	r2, r1, r2
 800424a:	4413      	add	r3, r2
 800424c:	3301      	adds	r3, #1
 800424e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004250:	4413      	add	r3, r2
 8004252:	b2c2      	uxtb	r2, r0
 8004254:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800425a:	3301      	adds	r3, #1
 800425c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004260:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004264:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004268:	429a      	cmp	r2, r3
 800426a:	d3a0      	bcc.n	80041ae <LTDC_put_string+0x1816>
			for(i=0; i< ( charWidth-48 ); i++)
 800426c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004270:	3301      	adds	r3, #1
 8004272:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004276:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800427a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427e:	3b30      	subs	r3, #48	; 0x30
 8004280:	429a      	cmp	r2, r3
 8004282:	db90      	blt.n	80041a6 <LTDC_put_string+0x180e>
				}
			}
		}

		//*******************************************************************************************************************************************************
		if( (charWidth > 56) && (charWidth <= 64 ) )
 8004284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004288:	2b38      	cmp	r3, #56	; 0x38
 800428a:	f240 8358 	bls.w	800493e <LTDC_put_string+0x1fa6>
 800428e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	f200 8353 	bhi.w	800493e <LTDC_put_string+0x1fa6>
		{
			for(i=0; i<8; i++)
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800429e:	e057      	b.n	8004350 <LTDC_put_string+0x19b8>
			{
				for(row = 0; row < charHeight; row++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042a6:	e048      	b.n	800433a <LTDC_put_string+0x19a2>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8) ) );
 80042a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	461a      	mov	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80042be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80042c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	fa41 f303 	asr.w	r3, r1, r3
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02e      	beq.n	8004330 <LTDC_put_string+0x1998>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) ) = colour & 0xFF;
 80042d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80042e8:	f897 1020 	ldrb.w	r1, [r7, #32]
 80042ec:	fb01 f202 	mul.w	r2, r1, r2
 80042f0:	4413      	add	r3, r2
 80042f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f4:	4413      	add	r3, r2
 80042f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( i *pixelWidth) +1) = (colour>>8) & 0xFF;
 80042fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	b298      	uxth	r0, r3
 8004306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800430a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800431c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004320:	fb01 f202 	mul.w	r2, r1, r2
 8004324:	4413      	add	r3, r2
 8004326:	3301      	adds	r3, #1
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	4413      	add	r3, r2
 800432c:	b2c2      	uxtb	r2, r0
 800432e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004334:	3301      	adds	r3, #1
 8004336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800433a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800433e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004342:	429a      	cmp	r2, r3
 8004344:	d3b0      	bcc.n	80042a8 <LTDC_put_string+0x1910>
			for(i=0; i<8; i++)
 8004346:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800434a:	3301      	adds	r3, #1
 800434c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004350:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004354:	2b07      	cmp	r3, #7
 8004356:	d9a3      	bls.n	80042a0 <LTDC_put_string+0x1908>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800435e:	e05f      	b.n	8004420 <LTDC_put_string+0x1a88>
			{
				for(row = 0; row < charHeight; row++)
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004366:	e050      	b.n	800440a <LTDC_put_string+0x1a72>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+1 ) );
 8004368:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800436a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	3301      	adds	r3, #1
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800437e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004382:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	fa41 f303 	asr.w	r3, r1, r3
 800438c:	4013      	ands	r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <LTDC_put_string+0x1a68>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8004392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043a8:	00d2      	lsls	r2, r2, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80043b0:	f897 1020 	ldrb.w	r1, [r7, #32]
 80043b4:	fb01 f202 	mul.w	r2, r1, r2
 80043b8:	4413      	add	r3, r2
 80043ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043bc:	4413      	add	r3, r2
 80043be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 8*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80043c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b298      	uxth	r0, r3
 80043ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80043dc:	fb02 f303 	mul.w	r3, r2, r3
 80043e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80043e4:	00d2      	lsls	r2, r2, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80043ec:	f897 1020 	ldrb.w	r1, [r7, #32]
 80043f0:	fb01 f202 	mul.w	r2, r1, r2
 80043f4:	4413      	add	r3, r2
 80043f6:	3301      	adds	r3, #1
 80043f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043fa:	4413      	add	r3, r2
 80043fc:	b2c2      	uxtb	r2, r0
 80043fe:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004404:	3301      	adds	r3, #1
 8004406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800440a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800440e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004412:	429a      	cmp	r2, r3
 8004414:	d3a8      	bcc.n	8004368 <LTDC_put_string+0x19d0>
			for(i=0; i< 8 ; i++)
 8004416:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800441a:	3301      	adds	r3, #1
 800441c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004420:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004424:	2b07      	cmp	r3, #7
 8004426:	d99b      	bls.n	8004360 <LTDC_put_string+0x19c8>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800442e:	e05f      	b.n	80044f0 <LTDC_put_string+0x1b58>
			{
				for(row = 0; row < charHeight; row++)
 8004430:	2300      	movs	r3, #0
 8004432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004436:	e050      	b.n	80044da <LTDC_put_string+0x1b42>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+2 ) );
 8004438:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800443a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	3302      	adds	r3, #2
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800444e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004452:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004456:	2180      	movs	r1, #128	; 0x80
 8004458:	fa41 f303 	asr.w	r3, r1, r3
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d036      	beq.n	80044d0 <LTDC_put_string+0x1b38>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8004462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004478:	0112      	lsls	r2, r2, #4
 800447a:	4413      	add	r3, r2
 800447c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004480:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004484:	fb01 f202 	mul.w	r2, r1, r2
 8004488:	4413      	add	r3, r2
 800448a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448c:	4413      	add	r3, r2
 800448e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 16*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8004496:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b298      	uxth	r0, r3
 800449e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	4413      	add	r3, r2
 80044b8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80044bc:	f897 1020 	ldrb.w	r1, [r7, #32]
 80044c0:	fb01 f202 	mul.w	r2, r1, r2
 80044c4:	4413      	add	r3, r2
 80044c6:	3301      	adds	r3, #1
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	4413      	add	r3, r2
 80044cc:	b2c2      	uxtb	r2, r0
 80044ce:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80044d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80044d4:	3301      	adds	r3, #1
 80044d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80044da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80044de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3a8      	bcc.n	8004438 <LTDC_put_string+0x1aa0>
			for(i=0; i< 8 ; i++)
 80044e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80044ea:	3301      	adds	r3, #1
 80044ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80044f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80044f4:	2b07      	cmp	r3, #7
 80044f6:	d99b      	bls.n	8004430 <LTDC_put_string+0x1a98>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80044fe:	e065      	b.n	80045cc <LTDC_put_string+0x1c34>
			{
				for(row = 0; row < charHeight; row++)
 8004500:	2300      	movs	r3, #0
 8004502:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004506:	e056      	b.n	80045b6 <LTDC_put_string+0x1c1e>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+3 ) );
 8004508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800450a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	3303      	adds	r3, #3
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 800451e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004522:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	fa41 f303 	asr.w	r3, r1, r3
 800452c:	4013      	ands	r3, r2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d03c      	beq.n	80045ac <LTDC_put_string+0x1c14>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8004532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004540:	fb02 f103 	mul.w	r1, r2, r3
 8004544:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004556:	f897 1020 	ldrb.w	r1, [r7, #32]
 800455a:	fb01 f202 	mul.w	r2, r1, r2
 800455e:	4413      	add	r3, r2
 8004560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004562:	4413      	add	r3, r2
 8004564:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 24*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 800456c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	b298      	uxth	r0, r3
 8004574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004582:	fb02 f103 	mul.w	r1, r2, r3
 8004586:	f897 2020 	ldrb.w	r2, [r7, #32]
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004598:	f897 1020 	ldrb.w	r1, [r7, #32]
 800459c:	fb01 f202 	mul.w	r2, r1, r2
 80045a0:	4413      	add	r3, r2
 80045a2:	3301      	adds	r3, #1
 80045a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a6:	4413      	add	r3, r2
 80045a8:	b2c2      	uxtb	r2, r0
 80045aa:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 80045ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045b0:	3301      	adds	r3, #1
 80045b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80045b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80045ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80045be:	429a      	cmp	r2, r3
 80045c0:	d3a2      	bcc.n	8004508 <LTDC_put_string+0x1b70>
			for(i=0; i< 8 ; i++)
 80045c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045c6:	3301      	adds	r3, #1
 80045c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80045cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d995      	bls.n	8004500 <LTDC_put_string+0x1b68>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80045da:	e05f      	b.n	800469c <LTDC_put_string+0x1d04>
			{
				for(row = 0; row < charHeight; row++)
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80045e2:	e050      	b.n	8004686 <LTDC_put_string+0x1cee>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+4 ) );
 80045e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80045fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80045fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004602:	2180      	movs	r1, #128	; 0x80
 8004604:	fa41 f303 	asr.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d036      	beq.n	800467c <LTDC_put_string+0x1ce4>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 800460e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004624:	0152      	lsls	r2, r2, #5
 8004626:	4413      	add	r3, r2
 8004628:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800462c:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004630:	fb01 f202 	mul.w	r2, r1, r2
 8004634:	4413      	add	r3, r2
 8004636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004638:	4413      	add	r3, r2
 800463a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 32*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8004642:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	b298      	uxth	r0, r3
 800464a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800464e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004660:	0152      	lsls	r2, r2, #5
 8004662:	4413      	add	r3, r2
 8004664:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004668:	f897 1020 	ldrb.w	r1, [r7, #32]
 800466c:	fb01 f202 	mul.w	r2, r1, r2
 8004670:	4413      	add	r3, r2
 8004672:	3301      	adds	r3, #1
 8004674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004676:	4413      	add	r3, r2
 8004678:	b2c2      	uxtb	r2, r0
 800467a:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 800467c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004680:	3301      	adds	r3, #1
 8004682:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004686:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800468a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800468e:	429a      	cmp	r2, r3
 8004690:	d3a8      	bcc.n	80045e4 <LTDC_put_string+0x1c4c>
			for(i=0; i< 8 ; i++)
 8004692:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004696:	3301      	adds	r3, #1
 8004698:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800469c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046a0:	2b07      	cmp	r3, #7
 80046a2:	d99b      	bls.n	80045dc <LTDC_put_string+0x1c44>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80046aa:	e065      	b.n	8004778 <LTDC_put_string+0x1de0>
			{
				for(row = 0; row < charHeight; row++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80046b2:	e056      	b.n	8004762 <LTDC_put_string+0x1dca>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+5 ) );
 80046b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	3305      	adds	r3, #5
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80046ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80046ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	fa41 f303 	asr.w	r3, r1, r3
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d03c      	beq.n	8004758 <LTDC_put_string+0x1dc0>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80046de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80046ec:	fb02 f103 	mul.w	r1, r2, r3
 80046f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004702:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004706:	fb01 f202 	mul.w	r2, r1, r2
 800470a:	4413      	add	r3, r2
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	4413      	add	r3, r2
 8004710:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 40*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 8004718:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	b298      	uxth	r0, r3
 8004720:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800472e:	fb02 f103 	mul.w	r1, r2, r3
 8004732:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004744:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004748:	fb01 f202 	mul.w	r2, r1, r2
 800474c:	4413      	add	r3, r2
 800474e:	3301      	adds	r3, #1
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	4413      	add	r3, r2
 8004754:	b2c2      	uxtb	r2, r0
 8004756:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800475c:	3301      	adds	r3, #1
 800475e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004762:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004766:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800476a:	429a      	cmp	r2, r3
 800476c:	d3a2      	bcc.n	80046b4 <LTDC_put_string+0x1d1c>
			for(i=0; i< 8 ; i++)
 800476e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004772:	3301      	adds	r3, #1
 8004774:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004778:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800477c:	2b07      	cmp	r3, #7
 800477e:	d995      	bls.n	80046ac <LTDC_put_string+0x1d14>
					}
				}
			}
			for(i=0; i< 8 ; i++)
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004786:	e065      	b.n	8004854 <LTDC_put_string+0x1ebc>
			{
				for(row = 0; row < charHeight; row++)
 8004788:	2300      	movs	r3, #0
 800478a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800478e:	e056      	b.n	800483e <LTDC_put_string+0x1ea6>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+6 ) );
 8004790:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	4413      	add	r3, r2
 800479a:	3306      	adds	r3, #6
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4413      	add	r3, r2
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 80047a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80047aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	fa41 f303 	asr.w	r3, r1, r3
 80047b4:	4013      	ands	r3, r2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03c      	beq.n	8004834 <LTDC_put_string+0x1e9c>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 48*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 80047ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80047be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80047c8:	fb02 f103 	mul.w	r1, r2, r3
 80047cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	440b      	add	r3, r1
 80047da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80047de:	f897 1020 	ldrb.w	r1, [r7, #32]
 80047e2:	fb01 f202 	mul.w	r2, r1, r2
 80047e6:	4413      	add	r3, r2
 80047e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ea:	4413      	add	r3, r2
 80047ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 48*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80047f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	b298      	uxth	r0, r3
 80047fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800480a:	fb02 f103 	mul.w	r1, r2, r3
 800480e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	440b      	add	r3, r1
 800481c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004820:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004824:	fb01 f202 	mul.w	r2, r1, r2
 8004828:	4413      	add	r3, r2
 800482a:	3301      	adds	r3, #1
 800482c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800482e:	4413      	add	r3, r2
 8004830:	b2c2      	uxtb	r2, r0
 8004832:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004838:	3301      	adds	r3, #1
 800483a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800483e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004842:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004846:	429a      	cmp	r2, r3
 8004848:	d3a2      	bcc.n	8004790 <LTDC_put_string+0x1df8>
			for(i=0; i< 8 ; i++)
 800484a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800484e:	3301      	adds	r3, #1
 8004850:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004854:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004858:	2b07      	cmp	r3, #7
 800485a:	d995      	bls.n	8004788 <LTDC_put_string+0x1df0>
					}
				}
			}

			for(i=0; i< ( charWidth-56 ); i++)
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004862:	e065      	b.n	8004930 <LTDC_put_string+0x1f98>
			{
				for(row = 0; row < charHeight; row++)
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800486a:	e056      	b.n	800491a <LTDC_put_string+0x1f82>
				{
					fontByte = *(  fontBitMap + (fontBitmaptIndex + (row*8)+7 ) );
 800486c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	3307      	adds	r3, #7
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					if(fontByte & (0x80>>i))
 8004882:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004886:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	fa41 f303 	asr.w	r3, r1, r3
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03c      	beq.n	8004910 <LTDC_put_string+0x1f78>
					{
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 56*pixelWidth ) + ( i *pixelWidth)      ) = colour & 0xFF;
 8004896:	f897 3020 	ldrb.w	r3, [r7, #32]
 800489a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80048a4:	fb02 f103 	mul.w	r1, r2, r3
 80048a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	440b      	add	r3, r1
 80048b6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80048ba:	f897 1020 	ldrb.w	r1, [r7, #32]
 80048be:	fb01 f202 	mul.w	r2, r1, r2
 80048c2:	4413      	add	r3, r2
 80048c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c6:	4413      	add	r3, r2
 80048c8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
						*(__IO uint8_t *) ( sdRamPtr + ( ( layerWidth * pixelWidth ) * row )+ ( 56*pixelWidth ) + ( i *pixelWidth) +1   ) = (colour>>8) & 0xFF;
 80048d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	b298      	uxth	r0, r3
 80048d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80048e6:	fb02 f103 	mul.w	r1, r2, r3
 80048ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	440b      	add	r3, r1
 80048f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80048fc:	f897 1020 	ldrb.w	r1, [r7, #32]
 8004900:	fb01 f202 	mul.w	r2, r1, r2
 8004904:	4413      	add	r3, r2
 8004906:	3301      	adds	r3, #1
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	4413      	add	r3, r2
 800490c:	b2c2      	uxtb	r2, r0
 800490e:	701a      	strb	r2, [r3, #0]
				for(row = 0; row < charHeight; row++)
 8004910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004914:	3301      	adds	r3, #1
 8004916:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800491a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800491e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004922:	429a      	cmp	r2, r3
 8004924:	d3a2      	bcc.n	800486c <LTDC_put_string+0x1ed4>
			for(i=0; i< ( charWidth-56 ); i++)
 8004926:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800492a:	3301      	adds	r3, #1
 800492c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004930:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004938:	3b38      	subs	r3, #56	; 0x38
 800493a:	429a      	cmp	r2, r3
 800493c:	db92      	blt.n	8004864 <LTDC_put_string+0x1ecc>
					}
				}
			}

		}
		sdRamPtr = sdRamPtr +  ( charWidth * pixelWidth ) + charSpace;
 800493e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004942:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	461a      	mov	r2, r3
 800494c:	7ffb      	ldrb	r3, [r7, #31]
 800494e:	4413      	add	r3, r2
 8004950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004952:	4413      	add	r3, r2
 8004954:	633b      	str	r3, [r7, #48]	; 0x30
		strPtr++;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3301      	adds	r3, #1
 800495a:	60bb      	str	r3, [r7, #8]
	while(*strPtr != 0x00)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47e a88f 	bne.w	8002a84 <LTDC_put_string+0xec>
	}

}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	373c      	adds	r7, #60	; 0x3c
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LTDC_font_select>:

void LTDC_font_select( uint8_t font)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	71fb      	strb	r3, [r7, #7]

	switch( font )
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d858      	bhi.n	8004a36 <LTDC_font_select+0xc2>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <LTDC_font_select+0x18>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049a1 	.word	0x080049a1
 8004990:	080049bf 	.word	0x080049bf
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049fb 	.word	0x080049fb
 800499c:	08004a19 	.word	0x08004a19
	{
	case FONT_BRITANICA_BOLD18Pts:
		globalFontSelector.fontDescrptPtr =   britannicBold_18ptDescriptors;
 80049a0:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <LTDC_font_select+0xec>)
 80049a2:	4a30      	ldr	r2, [pc, #192]	; (8004a64 <LTDC_font_select+0xf0>)
 80049a4:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace =   britannicBold_18ptCharSpace;
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <LTDC_font_select+0xf4>)
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <LTDC_font_select+0xec>)
 80049ac:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =       britannicBold_18ptBitmaps;
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <LTDC_font_select+0xec>)
 80049b0:	4a2e      	ldr	r2, [pc, #184]	; (8004a6c <LTDC_font_select+0xf8>)
 80049b2:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight =       britannicBold_18ptCharHeight;
 80049b4:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <LTDC_font_select+0xfc>)
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <LTDC_font_select+0xec>)
 80049ba:	721a      	strb	r2, [r3, #8]
		break; 
 80049bc:	e04a      	b.n	8004a54 <LTDC_font_select+0xe0>
	case FONT_CENTURY_GOTHIC18Pts:
		globalFontSelector.fontDescrptPtr =  centuryGothic_18ptDescriptors;
 80049be:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <LTDC_font_select+0xec>)
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <LTDC_font_select+0x100>)
 80049c2:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace =  centuryGothic_18ptCharSpace;
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <LTDC_font_select+0x104>)
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <LTDC_font_select+0xec>)
 80049ca:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =      centuryGothic_18ptBitmaps;
 80049cc:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <LTDC_font_select+0xec>)
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <LTDC_font_select+0x108>)
 80049d0:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight =      centuryGothic_18ptCharHeight;
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <LTDC_font_select+0x10c>)
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <LTDC_font_select+0xec>)
 80049d8:	721a      	strb	r2, [r3, #8]
		break;    
 80049da:	e03b      	b.n	8004a54 <LTDC_font_select+0xe0>
	case FONT_TIMES_NEW_ROMAN18Pts:     
		globalFontSelector.fontDescrptPtr =   timesNewRoman_18ptDescriptors;
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <LTDC_font_select+0xec>)
 80049de:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <LTDC_font_select+0x110>)
 80049e0:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace =   timesNewRoman_18ptCharSpace;
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <LTDC_font_select+0x114>)
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <LTDC_font_select+0xec>)
 80049e8:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =       timesNewRoman_18ptBitmaps;
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <LTDC_font_select+0xec>)
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <LTDC_font_select+0x118>)
 80049ee:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight =       timesNewRoman_18ptCharHeight;
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <LTDC_font_select+0x11c>)
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <LTDC_font_select+0xec>)
 80049f6:	721a      	strb	r2, [r3, #8]

		break;
 80049f8:	e02c      	b.n	8004a54 <LTDC_font_select+0xe0>
	case FONT_TIMES_NEW_ROMAN48Pts:
		globalFontSelector.fontDescrptPtr =  timesNewRoman_48ptDescriptors;
 80049fa:	4b19      	ldr	r3, [pc, #100]	; (8004a60 <LTDC_font_select+0xec>)
 80049fc:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <LTDC_font_select+0x120>)
 80049fe:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace =  timesNewRoman_48ptCharSpace;
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <LTDC_font_select+0x124>)
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <LTDC_font_select+0xec>)
 8004a06:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =  timesNewRoman_48ptBitmaps;
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <LTDC_font_select+0xec>)
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <LTDC_font_select+0x128>)
 8004a0c:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight = timesNewRoman_48ptCharHeight ;
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <LTDC_font_select+0x12c>)
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <LTDC_font_select+0xec>)
 8004a14:	721a      	strb	r2, [r3, #8]
		break;
 8004a16:	e01d      	b.n	8004a54 <LTDC_font_select+0xe0>
	case FONT_TIMES_NEW_ROMAN8Pts:

		globalFontSelector.fontDescrptPtr =  timesNewRoman_8ptDescriptors;
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <LTDC_font_select+0xec>)
 8004a1a:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <LTDC_font_select+0x130>)
 8004a1c:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace = timesNewRoman_8ptCharSpace;
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <LTDC_font_select+0x134>)
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <LTDC_font_select+0xec>)
 8004a24:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =  timesNewRoman_8ptBitmaps;
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <LTDC_font_select+0xec>)
 8004a28:	4a20      	ldr	r2, [pc, #128]	; (8004aac <LTDC_font_select+0x138>)
 8004a2a:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight = timesNewRoman_8ptCharHeight;
 8004a2c:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <LTDC_font_select+0x13c>)
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <LTDC_font_select+0xec>)
 8004a32:	721a      	strb	r2, [r3, #8]
		break;
 8004a34:	e00e      	b.n	8004a54 <LTDC_font_select+0xe0>

	default:

		globalFontSelector.fontDescrptPtr =  timesNewRoman_8ptDescriptors;
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <LTDC_font_select+0xec>)
 8004a38:	4a1a      	ldr	r2, [pc, #104]	; (8004aa4 <LTDC_font_select+0x130>)
 8004a3a:	601a      	str	r2, [r3, #0]
		globalFontSelector.interCharSpace = timesNewRoman_8ptCharSpace;
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <LTDC_font_select+0x134>)
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <LTDC_font_select+0xec>)
 8004a42:	725a      	strb	r2, [r3, #9]
		globalFontSelector.fontBitMap =  timesNewRoman_8ptBitmaps;
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <LTDC_font_select+0xec>)
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <LTDC_font_select+0x138>)
 8004a48:	605a      	str	r2, [r3, #4]
		globalFontSelector.fontHeight = timesNewRoman_8ptCharHeight;
 8004a4a:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <LTDC_font_select+0x13c>)
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <LTDC_font_select+0xec>)
 8004a50:	721a      	strb	r2, [r3, #8]
		break;
 8004a52:	bf00      	nop
	}


}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000040 	.word	0x20000040
 8004a64:	08005a9c 	.word	0x08005a9c
 8004a68:	08004b52 	.word	0x08004b52
 8004a6c:	08004b54 	.word	0x08004b54
 8004a70:	08004b51 	.word	0x08004b51
 8004a74:	08006c24 	.word	0x08006c24
 8004a78:	08005c19 	.word	0x08005c19
 8004a7c:	08005c1c 	.word	0x08005c1c
 8004a80:	08005c18 	.word	0x08005c18
 8004a84:	08007d08 	.word	0x08007d08
 8004a88:	08006da1 	.word	0x08006da1
 8004a8c:	08006da4 	.word	0x08006da4
 8004a90:	08006da0 	.word	0x08006da0
 8004a94:	0800db4c 	.word	0x0800db4c
 8004a98:	08007e85 	.word	0x08007e85
 8004a9c:	08007e88 	.word	0x08007e88
 8004aa0:	08007e84 	.word	0x08007e84
 8004aa4:	0800e124 	.word	0x0800e124
 8004aa8:	0800dcc9 	.word	0x0800dcc9
 8004aac:	0800dccc 	.word	0x0800dccc
 8004ab0:	0800dcc8 	.word	0x0800dcc8

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	4d0d      	ldr	r5, [pc, #52]	; (8004aec <__libc_init_array+0x38>)
 8004ab8:	4c0d      	ldr	r4, [pc, #52]	; (8004af0 <__libc_init_array+0x3c>)
 8004aba:	1b64      	subs	r4, r4, r5
 8004abc:	10a4      	asrs	r4, r4, #2
 8004abe:	2600      	movs	r6, #0
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	4d0b      	ldr	r5, [pc, #44]	; (8004af4 <__libc_init_array+0x40>)
 8004ac6:	4c0c      	ldr	r4, [pc, #48]	; (8004af8 <__libc_init_array+0x44>)
 8004ac8:	f000 f818 	bl	8004afc <_init>
 8004acc:	1b64      	subs	r4, r4, r5
 8004ace:	10a4      	asrs	r4, r4, #2
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	0800e2a0 	.word	0x0800e2a0
 8004af0:	0800e2a0 	.word	0x0800e2a0
 8004af4:	0800e2a0 	.word	0x0800e2a0
 8004af8:	0800e2a4 	.word	0x0800e2a4

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
